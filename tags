!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ADJUSTMENT	src/Configure/configure_capture.h	/^const double ADJUSTMENT = 0.01;         \/\/ for level , smaller and slower$/;"	v
AEPAnalysis	src/Analysis/AEPAnalysis.h	/^    AEPAnalysis(){$/;"	f	class:AEPAnalysis
AEPAnalysis	src/Analysis/AEPAnalysis.h	/^class AEPAnalysis:public EPAnalysis{$/;"	c
ALISE	src/Configure/SerialFiles.cpp	45;"	d	file:
ALISE	src/Configure/SerialFiles.cpp	49;"	d	file:
ALISE	src/Configure/SerialFiles.cpp	55;"	d	file:
ALISE	src/Configure/SerialFiles.cpp	59;"	d	file:
ALPHA	src/Configure/configure_capture.h	/^const double ALPHA = 0.9;               \/\/small and slower(in speech)$/;"	v
APP	src/EditDistance/app.cpp	/^APP::APP(){$/;"	f	class:APP
APP	src/EditDistance/app.h	/^class APP {$/;"	c
APP	src/LexTree/app.cpp	/^APP::APP(){$/;"	f	class:APP
APP	src/LexTree/app.h	/^class APP {$/;"	c
ARCHITECTURE_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	326;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	329;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	332;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	335;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	338;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	341;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	344;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	348;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	319;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	322;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	325;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	328;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	331;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	334;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	337;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	341;"	d	file:
AUTOMATON_STATE_NUM	src/Configure/configure_hmm.h	1;"	d
AutoCapture	src/Capture/AutoCapture.h	/^    AutoCapture(EPAnalysis * ep):ep(ep){};$/;"	f	class:AutoCapture
AutoCapture	src/Capture/AutoCapture.h	/^class AutoCapture:public Capture{$/;"	c
BACK_PTR	src/Feature/SeqModel.h	/^            BACK_PTR$/;"	e	enum:SeqModel::SEQ_DTW_PATH_TYPE
BEPAnalysis	src/Analysis/BEPAnalysis.h	/^    BEPAnalysis(){}$/;"	f	class:BEPAnalysis
BEPAnalysis	src/Analysis/BEPAnalysis.h	/^class BEPAnalysis:public EPAnalysis{$/;"	c
BFSNodes	src/LexTree/LexTree.cpp	/^void LexTree::BFSNodes(){$/;"	f	class:LexTree
BLUE	src/Configure/tool.h	50;"	d
BLUE_BACK	src/Configure/tool.h	64;"	d
BROWN	src/Configure/tool.h	57;"	d
BackPtr	src/Feature/SeqModel.h	/^struct BackPtr {$/;"	s
Beam	src/Feature/WaveFeatureOP.h	/^        Beam$/;"	e	enum:WaveFeatureOP::OpType
BytesPerSample	src/readwave/readwave.h	/^	short BytesPerSample;$/;"	m	struct:WavFileHead
CEPS_NUM	src/Configure/configure_feature.h	/^const int    CEPS_NUM = 13;$/;"	v
CHANGE	src/EditDistance/path.h	/^    DELETE,INSERT,SAME,CHANGE$/;"	e	enum:DIR
CHECK_ERR	src/Capture/Capture.cpp	/^void CHECK_ERR(PaError err){$/;"	f
CMAKE_BINARY_DIR	build/Analysis/Makefile	/^CMAKE_BINARY_DIR = \/Users\/wengsht\/Course\/speech\/hw\/master\/build$/;"	m
CMAKE_BINARY_DIR	build/Capture/Makefile	/^CMAKE_BINARY_DIR = \/Users\/wengsht\/Course\/speech\/hw\/master\/build$/;"	m
CMAKE_BINARY_DIR	build/Configure/Makefile	/^CMAKE_BINARY_DIR = \/Users\/wengsht\/Course\/speech\/hw\/master\/build$/;"	m
CMAKE_BINARY_DIR	build/EditDistance/Makefile	/^CMAKE_BINARY_DIR = \/Users\/wengsht\/Course\/speech\/hw\/master\/build$/;"	m
CMAKE_BINARY_DIR	build/Feature/Makefile	/^CMAKE_BINARY_DIR = \/Users\/wengsht\/Course\/speech\/hw\/master\/build$/;"	m
CMAKE_BINARY_DIR	build/Graph/Makefile	/^CMAKE_BINARY_DIR = \/Users\/wengsht\/Course\/speech\/hw\/master\/build$/;"	m
CMAKE_BINARY_DIR	build/LexTree/Makefile	/^CMAKE_BINARY_DIR = \/Users\/wengsht\/Course\/speech\/hw\/master\/build$/;"	m
CMAKE_BINARY_DIR	build/Makefile	/^CMAKE_BINARY_DIR = \/Users\/wengsht\/Course\/speech\/hw\/master\/build$/;"	m
CMAKE_BINARY_DIR	build/ThreadPool/Makefile	/^CMAKE_BINARY_DIR = \/Users\/wengsht\/Course\/speech\/hw\/master\/build$/;"	m
CMAKE_BINARY_DIR	build/data/Makefile	/^CMAKE_BINARY_DIR = \/Users\/wengsht\/Course\/speech\/hw\/master\/build$/;"	m
CMAKE_BINARY_DIR	build/readwave/Makefile	/^CMAKE_BINARY_DIR = \/Users\/wengsht\/Course\/speech\/hw\/master\/build$/;"	m
CMAKE_BINARY_DIR	build/test/Makefile	/^CMAKE_BINARY_DIR = \/Users\/wengsht\/Course\/speech\/hw\/master\/build$/;"	m
CMAKE_COMMAND	build/Analysis/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.0.1\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/Capture/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.0.1\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/Configure/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.0.1\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/EditDistance/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.0.1\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/Feature/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.0.1\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/Graph/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.0.1\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/LexTree/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.0.1\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.0.1\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/ThreadPool/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.0.1\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/data/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.0.1\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/readwave/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.0.1\/bin\/cmake$/;"	m
CMAKE_COMMAND	build/test/Makefile	/^CMAKE_COMMAND = \/usr\/local\/Cellar\/cmake\/3.0.1\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	build/Analysis/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/wengsht\/Course\/speech\/hw\/master\/src$/;"	m
CMAKE_SOURCE_DIR	build/Capture/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/wengsht\/Course\/speech\/hw\/master\/src$/;"	m
CMAKE_SOURCE_DIR	build/Configure/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/wengsht\/Course\/speech\/hw\/master\/src$/;"	m
CMAKE_SOURCE_DIR	build/EditDistance/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/wengsht\/Course\/speech\/hw\/master\/src$/;"	m
CMAKE_SOURCE_DIR	build/Feature/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/wengsht\/Course\/speech\/hw\/master\/src$/;"	m
CMAKE_SOURCE_DIR	build/Graph/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/wengsht\/Course\/speech\/hw\/master\/src$/;"	m
CMAKE_SOURCE_DIR	build/LexTree/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/wengsht\/Course\/speech\/hw\/master\/src$/;"	m
CMAKE_SOURCE_DIR	build/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/wengsht\/Course\/speech\/hw\/master\/src$/;"	m
CMAKE_SOURCE_DIR	build/ThreadPool/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/wengsht\/Course\/speech\/hw\/master\/src$/;"	m
CMAKE_SOURCE_DIR	build/data/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/wengsht\/Course\/speech\/hw\/master\/src$/;"	m
CMAKE_SOURCE_DIR	build/readwave/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/wengsht\/Course\/speech\/hw\/master\/src$/;"	m
CMAKE_SOURCE_DIR	build/test/Makefile	/^CMAKE_SOURCE_DIR = \/Users\/wengsht\/Course\/speech\/hw\/master\/src$/;"	m
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	106;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	109;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	111;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	120;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	128;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	133;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	13;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	140;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	143;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	146;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	154;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	173;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	181;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	186;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	191;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	198;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	215;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	218;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	221;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	34;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	43;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	46;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	59;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	65;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	71;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	77;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	91;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	98;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	103;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	111;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	114;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	116;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	125;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	12;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	133;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	138;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	145;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	148;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	156;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	175;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	183;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	188;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	18;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	191;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	208;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	211;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	214;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	39;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	48;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	51;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	64;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	70;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	76;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	82;"	d	file:
COMPILER_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	96;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	100;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	114;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	121;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	129;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	135;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	147;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	156;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	15;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	175;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	193;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	201;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	206;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	35;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	48;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	60;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	67;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	73;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	80;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	85;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	93;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	105;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	119;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	126;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	134;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	140;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	149;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	14;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	158;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	177;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	194;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	199;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	20;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	40;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	53;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	65;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	72;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	78;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	85;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	90;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	98;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	101;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	115;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	122;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	130;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	136;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	148;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	157;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	16;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	176;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	194;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	202;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	207;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	36;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	49;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	61;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	68;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	74;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	81;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	86;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	94;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	106;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	120;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	127;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	135;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	141;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	150;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	159;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	15;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	178;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	195;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	200;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	21;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	41;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	54;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	66;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	73;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	79;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	86;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	91;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	99;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	102;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	116;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	124;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	137;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	150;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	161;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	164;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	177;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	18;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	195;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	203;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	208;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	20;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	38;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	50;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	62;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	82;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	87;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	95;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	100;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	107;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	121;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	129;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	142;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	152;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	163;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	166;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	179;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	196;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	201;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	23;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	25;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	43;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	55;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	67;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	87;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	92;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	168;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	24;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	44;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	170;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	29;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	49;"	d	file:
CONST_REFERENCE_READ_ONLY_DECLARE	src/Configure/tool.h	73;"	d
CYAN	src/Configure/tool.h	53;"	d
Capture	src/Capture/Capture.cpp	/^Capture::Capture(){$/;"	f	class:Capture
Capture	src/Capture/Capture.h	/^class Capture{$/;"	c
Cluster	src/Feature/KMeanState.h	/^struct Cluster{$/;"	s
ClusterSet	src/Feature/KMeanState.h	/^		std::vector<Cluster*> ClusterSet;$/;"	m	class:KMeanState
Conf	src/EditDistance/conf.h	/^class Conf{$/;"	c
Container	src/EditDistance/tmp/container.h	/^	Container(){}$/;"	f	class:Container
Container	src/EditDistance/tmp/container.h	/^	Container(T* items,int len){$/;"	f	class:Container
Container	src/EditDistance/tmp/container.h	/^class Container{$/;"	c
ContainerSet	src/EditDistance/tmp/containerset.h	/^class ContainerSet$/;"	c
Count	src/EditDistance/path.h	/^	Count(){$/;"	f	struct:Count
Count	src/EditDistance/path.h	/^struct Count{$/;"	s
DAEPAnalysis	src/Analysis/DAEPAnalysis.h	/^    DAEPAnalysis(){};$/;"	f	class:DAEPAnalysis
DAEPAnalysis	src/Analysis/DAEPAnalysis.h	/^class DAEPAnalysis:public EPAnalysis{$/;"	c
DARY_GRAY	src/Configure/tool.h	52;"	d
DATA_SILENCE	src/Configure/configure_basic.h	49;"	d
DATA_SILENCE	src/Configure/configure_basic.h	54;"	d
DATA_SILENCE	src/Configure/configure_basic.h	59;"	d
DEC	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	352;"	d	file:
DEC	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	345;"	d	file:
DEFAULT_BEAM_THRESHOLD	src/Configure/configure_dtw.h	27;"	d
DEFAULT_SIZE_BIT	src/Configure/SerialFiles.cpp	23;"	d	file:
DEFAULT_THREAD_NUM	src/Configure/configure.h	/^const int DEFAULT_THREAD_NUM = 4;$/;"	v
DELETE	src/EditDistance/path.h	/^    DELETE,INSERT,SAME,CHANGE$/;"	e	enum:DIR
DELTA_TIMES	src/Configure/configure_feature.h	/^const int    DELTA_TIMES = 2;$/;"	v
DIR	src/EditDistance/path.h	/^enum DIR {$/;"	g
DITHER_FLAG	src/Capture/Capture.cpp	11;"	d	file:
DTW_MAX_FORWARD	src/Configure/configure_hmm.h	6;"	d
DUMMY	src/Feature/HMMState.h	/^            DUMMY,$/;"	e	enum:HMMState::StateType
Delta	src/Feature/Feature.h	/^        Delta,$/;"	e	enum:Feature::FeatureType
DoubleDelta	src/Feature/Feature.h	/^        DoubleDelta$/;"	e	enum:Feature::FeatureType
Dtw_Column_Link	src/Feature/SeqModel.h	/^struct Dtw_Column_Link {$/;"	s
Dtw_Column_Node	src/Feature/SeqModel.h	/^    Dtw_Column_Node() : lastUpdate(NONE_UPDATE), preIdx(NIL_BACK_PTR), backPtr(NIL_BACK_PTR) {$/;"	f	struct:Dtw_Column_Node
Dtw_Column_Node	src/Feature/SeqModel.h	/^struct Dtw_Column_Node {$/;"	s
DummyState	src/Feature/DummyState.h	/^        DummyState(std::vector<WaveFeatureOP> *templates) : HMMState(templates) {}$/;"	f	class:DummyState
DummyState	src/Feature/DummyState.h	/^class DummyState : public HMMState {$/;"	c
EDGE	build/Graph/parseGraph.h	22;"	d
EDGE	src/Graph/parseGraph.h	22;"	d
EM	src/Feature/KMeanState.cpp	/^void KMeanState::EM(int g)$/;"	f	class:KMeanState
EPAnalysis	src/Analysis/EPAnalysis.h	/^    EPAnalysis(){$/;"	f	class:EPAnalysis
EPAnalysis	src/Analysis/EPAnalysis.h	/^class EPAnalysis{$/;"	c
EQUALS	build/Analysis/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/Capture/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/Configure/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/EditDistance/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/Feature/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/Graph/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/LexTree/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/ThreadPool/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/data/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/readwave/Makefile	/^EQUALS = =$/;"	m
EQUALS	build/test/Makefile	/^EQUALS = =$/;"	m
ERROR_CODE	src/Configure/tool.cpp	134;"	d	file:
ERROR_CODE	src/Configure/tool.cpp	137;"	d	file:
ERROR_CODE	src/Configure/tool.h	104;"	d
ERROR_CODE	src/Configure/tool.h	107;"	d
ERROR_CODE	src/Configure/tool.h	110;"	d
ERROR_CODE	src/Configure/tool.h	99;"	d
ERROR_UIDS	src/Configure/tool.h	/^enum ERROR_UIDS {$/;"	g
EXTENT_SPEECH	src/Configure/configure_capture.h	/^const double EXTENT_SPEECH = 250;  \/\/??? no use now$/;"	v
EXTENT_SPEECH_FRAMES	src/Configure/configure_capture.h	/^const int EXTENT_SPEECH_FRAMES = EXTENT_SPEECH * FRAME_PER_SECOND \/ 1000;$/;"	v
ErrorLog	src/Configure/tool.cpp	/^void ErrorLog(const char *msg,...){$/;"	f
FLOOR_TRANSITION_PROBABILITY	src/Configure/configure_hmm.h	9;"	d
FORGET_FACTOR	src/Configure/configure_capture.h	/^const double FORGET_FACTOR = 3;       \/\/ for bg , smaller and faster$/;"	v
FRAME_PER_SECOND	src/Configure/configure_basic.h	/^const int FRAME_PER_SECOND = 40; \/\/don't change$/;"	v
FULL_LOAD	src/Feature/WaveFeatureOP.h	/^        FULL_LOAD$/;"	e	enum:WaveFeatureOP::LOAD_TYPE
FULL_PATH	src/Feature/SeqModel.h	/^            FULL_PATH,$/;"	e	enum:SeqModel::SEQ_DTW_PATH_TYPE
Feature	src/Feature/Feature.h	/^    Feature() {$/;"	f	class:Feature
Feature	src/Feature/Feature.h	/^class Feature{$/;"	c
FeatureExtractor	src/Feature/FeatureExtractor.h	/^class FeatureExtractor{$/;"	c
FeatureType	src/Feature/Feature.h	/^    enum FeatureType {$/;"	g	class:Feature
FileLength	src/readwave/readwave.h	/^	int FileLength;$/;"	m	struct:WavFileHead
FillWaveHeader	src/readwave/readwave.cpp	/^void FillWaveHeader(void *buffer, int raw_wave_len, int sampleRate)$/;"	f
FormatCategory	src/readwave/readwave.h	/^	short FormatCategory;$/;"	m	struct:WavFileHead
GAUSSIAN_NUM	src/Configure/configure_hmm.h	2;"	d
GRAPH_PARAS	build/Graph/parseGraph.cpp	43;"	d	file:
GRAPH_PARAS	build/Graph/parseGraph.cpp	49;"	d	file:
GRAPH_PARAS	build/Graph/parseGraph.h	48;"	d
GRAPH_PARAS	build/Graph/parseGraph.h	53;"	d
GRAPH_PARAS	build/Graph/parseGraph.h	56;"	d
GRAPH_PARAS	build/Graph/parseGraph.h	59;"	d
GRAPH_PARAS	src/Feature/SeqModel.cpp	44;"	d	file:
GRAPH_PARAS	src/Feature/SeqModel.cpp	47;"	d	file:
GRAPH_PARAS	src/Feature/SeqModel.h	172;"	d
GRAPH_PARAS	src/Feature/SeqModel.h	175;"	d
GRAPH_PARAS	src/Graph/parseGraph.cpp	46;"	d	file:
GRAPH_PARAS	src/Graph/parseGraph.cpp	52;"	d	file:
GRAPH_PARAS	src/Graph/parseGraph.h	48;"	d
GRAPH_PARAS	src/Graph/parseGraph.h	53;"	d
GRAPH_PARAS	src/Graph/parseGraph.h	56;"	d
GRAPH_PARAS	src/Graph/parseGraph.h	59;"	d
GREEN	src/Configure/tool.h	48;"	d
GREEN_BACK	src/Configure/tool.h	63;"	d
Gaussian	src/Feature/Gaussian.cpp	/^Gaussian::Gaussian(int featureSize){$/;"	f	class:Gaussian
Gaussian	src/Feature/Gaussian.h	/^class Gaussian{$/;"	c
GaussianModel	src/Feature/KMeanState.h	/^		std::vector<Gaussian*> GaussianModel;$/;"	m	class:KMeanState
GaussianSet	src/Feature/SoftState.h	/^        std::vector<Gaussian *> GaussianSet;$/;"	m	class:SoftState
GetWavHeader	src/readwave/readwave.cpp	/^void GetWavHeader(const char *wavFile, short *Bits, int *Rate,$/;"	f
GraphEdge	build/Graph/parseGraph.h	/^struct GraphEdge {$/;"	s
GraphEdge	src/Graph/parseGraph.h	/^struct GraphEdge {$/;"	s
HEX	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	363;"	d	file:
HEX	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	356;"	d	file:
HMMAutomaton	src/Feature/HMMAutomaton.cpp	/^HMMAutomaton::HMMAutomaton(std::vector<WaveFeatureOP> *templates, int stateNum, int gaussNum, int trainTimes) : templates(templates), stateNum(stateNum), gaussNum(gaussNum), trainTimes(trainTimes) {$/;"	f	class:HMMAutomaton
HMMAutomaton	src/Feature/HMMAutomaton.h	/^class HMMAutomaton {$/;"	c
HMMAutomatonSet	src/Feature/HMMAutomatonSet.cpp	/^HMMAutomatonSet::HMMAutomatonSet(int stateNum, int gaussNum, int trainTimes) : stateNum(stateNum), gaussNum(gaussNum), trainTimes(trainTimes) {$/;"	f	class:HMMAutomatonSet
HMMAutomatonSet	src/Feature/HMMAutomatonSet.h	/^class HMMAutomatonSet : public WaveFeatureOPSet {$/;"	c
HMMKMeanAutomaton	src/Feature/HMMKMeanAutomaton.h	/^class HMMKMeanAutomaton : public HMMAutomaton {$/;"	c
HMMKMeanAutomaton	src/Feature/HMMKmeanAutomaton.cpp	/^HMMKMeanAutomaton::HMMKMeanAutomaton(std::vector<WaveFeatureOP> *templates, int stateNum, int gaussNum, int trainTimes) : HMMAutomaton(templates, stateNum, gaussNum, trainTimes) {$/;"	f	class:HMMKMeanAutomaton
HMMRecognition	src/Feature/HMMRecognition.cpp	/^HMMRecognition::HMMRecognition(int stateNum, int gaussNum, int trainTimes) : stateNum(stateNum), gaussNum(gaussNum), trainTimes(trainTimes), automatons(stateNum, gaussNum, trainTimes) {$/;"	f	class:HMMRecognition
HMMRecognition	src/Feature/HMMRecognition.h	/^class HMMRecognition {$/;"	c
HMMSeqKMeanTrainer	src/Feature/HMMSeqKMeanTrainer.cpp	/^HMMSeqKMeanTrainer::HMMSeqKMeanTrainer() {$/;"	f	class:HMMSeqKMeanTrainer
HMMSeqKMeanTrainer	src/Feature/HMMSeqKMeanTrainer.h	/^class HMMSeqKMeanTrainer : public HMMSeqTrainer {$/;"	c
HMMSeqRecognition	src/Feature/HMMSeqRecognition.cpp	/^HMMSeqRecognition::HMMSeqRecognition(int stateNum, int gaussNum, int trainTimes) : HMMRecognition(stateNum, gaussNum, trainTimes) {$/;"	f	class:HMMSeqRecognition
HMMSeqRecognition	src/Feature/HMMSeqRecognition.h	/^class HMMSeqRecognition : public HMMRecognition {$/;"	c
HMMSeqTrainer	src/Feature/HMMSeqTrainer.cpp	/^HMMSeqTrainer::HMMSeqTrainer() {$/;"	f	class:HMMSeqTrainer
HMMSeqTrainer	src/Feature/HMMSeqTrainer.h	/^class HMMSeqTrainer {$/;"	c
HMMSoftAutomaton	src/Feature/HMMSoftAutomaton.cpp	/^HMMSoftAutomaton::HMMSoftAutomaton(std::vector<WaveFeatureOP> *templates, int stateNum, int gaussNum, int trainTimes) : HMMAutomaton(templates, stateNum, gaussNum, trainTimes) {$/;"	f	class:HMMSoftAutomaton
HMMSoftAutomaton	src/Feature/HMMSoftAutomaton.h	/^class HMMSoftAutomaton : public HMMAutomaton {$/;"	c
HMMState	src/Feature/HMMState.h	/^        HMMState() : templates(NULL) {}$/;"	f	class:HMMState
HMMState	src/Feature/HMMState.h	/^        HMMState(std::vector<WaveFeatureOP> *templates) : templates(templates) {}$/;"	f	class:HMMState
HMMState	src/Feature/HMMState.h	/^class HMMState {$/;"	c
I	src/Feature/WaveFeatureOPSet.h	/^                dataSetType::iterator I;$/;"	m	class:WaveFeatureOPSet::iterator
ID_VOID_MAIN	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	9;"	d	file:
INF	src/LexTree/spellcheck.h	/^const int INF = 0x3f3f3f3f;$/;"	v
INIT_KMEAN_0_1	src/Configure/configure_hmm.h	19;"	d
INIT_KMEAN_0_2	src/Configure/configure_hmm.h	20;"	d
INPUTS_DIR	src/Configure/configure_dtw.h	20;"	d
INSERT	src/EditDistance/path.h	/^    DELETE,INSERT,SAME,CHANGE$/;"	e	enum:DIR
IllegalDist	src/Feature/Feature.cpp	/^const double Feature::IllegalDist = 1e18;$/;"	m	class:Feature	file:
IllegalDist	src/Feature/Feature.h	/^    const static double IllegalDist;$/;"	m	class:Feature
Init	src/Feature/HMMAutomaton.h	/^    void Init() {$/;"	f	class:HMMAutomaton
Initial	src/Analysis/AEPAnalysis.h	/^    virtual void Initial(RawData * rawData){$/;"	f	class:AEPAnalysis
Initial	src/Analysis/EPAnalysis.h	/^    virtual void Initial(RawData * rawData){$/;"	f	class:EPAnalysis
KMEAN	src/Feature/HMMState.h	/^            KMEAN,$/;"	e	enum:HMMState::StateType
KMeanNodeCost	src/Feature/KMeanState.cpp	/^double KMeanState::KMeanNodeCost(Feature *f){$/;"	f	class:KMeanState
KMeanState	src/Feature/KMeanState.cpp	/^KMeanState::KMeanState(std::vector<WaveFeatureOP> * templates) : HMMState(templates) {$/;"	f	class:KMeanState
KMeanState	src/Feature/KMeanState.h	/^class KMeanState : public HMMState {$/;"	c
KMeanTrain	src/Feature/KMeanState.cpp	/^bool KMeanState::KMeanTrain(int &gaussianNum)$/;"	f	class:KMeanState
Key	src/EditDistance/tmp/containerset.h	/^	vector <int> Key;$/;"	m	class:ContainerSet
LEVEL_BG_THRESHOLD	src/Configure/configure_capture.h	/^const double LEVEL_BG_THRESHOLD = 10;$/;"	v
LIGHT_BLUE	src/Configure/tool.h	51;"	d
LIGHT_CYAN	src/Configure/tool.h	54;"	d
LIGHT_GRAY	src/Configure/tool.h	59;"	d
LIGHT_GREEN	src/Configure/tool.h	49;"	d
LIGHT_PURPLE	src/Configure/tool.h	56;"	d
LIGHT_RED	src/Configure/tool.h	47;"	d
LINK_WORD	src/Configure/configure_hmm.h	16;"	d
LOAD_TYPE	src/Feature/WaveFeatureOP.h	/^    enum LOAD_TYPE {$/;"	g	class:WaveFeatureOP
LexTree	src/LexTree/LexTree.cpp	/^LexTree::LexTree(){$/;"	f	class:LexTree
LexTree	src/LexTree/LexTree.h	/^class LexTree{$/;"	c
Link	src/LexTree/spellcheck.h	/^	Link(){$/;"	f	class:Link
Link	src/LexTree/spellcheck.h	/^class Link{$/;"	c
LinkNode	src/LexTree/spellcheck.h	/^	LinkNode() {$/;"	f	struct:LinkNode
LinkNode	src/LexTree/spellcheck.h	/^struct LinkNode{$/;"	s
Log	src/Configure/tool.cpp	/^void Log(const char * msg,...){$/;"	f
MAXN	src/Feature/mathtool.cpp	/^const int MAXN = 1000;$/;"	v
MAX_BUFFER_SECOND	src/Configure/configure_basic.h	/^const int MAX_BUFFER_SECOND  = 120 ; \/\/ 2 minutes, don't too small$/;"	v
MAX_F	src/Configure/configure_feature.h	/^const double MAX_F = 4000.0; \/\/(SAMPLE_RATE \/ 2.0);$/;"	v
MAX_SIZE	src/Configure/configure_capture.h	/^const int MAX_SIZE =MAX_TOTAL_SAMPLE *NUM_CHANNELS;$/;"	v
MAX_TEMPLATES_PER_WORD	src/Configure/configure_dtw.h	25;"	d
MAX_TOTAL_SAMPLE	src/Configure/configure_capture.h	/^const int MAX_TOTAL_SAMPLE = MAX_BUFFER_SECOND *SAMPLE_RATE;$/;"	v
MAX_TRAIN_TIMES	src/Configure/configure_hmm.h	4;"	d
MEL_FILTER_NUM	src/Configure/configure_feature.h	/^const int    MEL_FILTER_NUM = 40;$/;"	v
MFCC_SUFFIX	src/Configure/configure_basic.h	13;"	d
MIN_F	src/Configure/configure_feature.h	/^const double MIN_F = 0.0;$/;"	v
MIN_SILENT_FRAMES	src/Configure/configure_capture.h	/^const int MIN_SILENT_FRAMES = MIN_SILENT_TIME * FRAME_PER_SECOND \/ 1000;$/;"	v
MIN_SILENT_TIME	src/Configure/configure_capture.h	/^const double MIN_SILENT_TIME = 100;$/;"	v
MIN_SPEECH_FRAMES	src/Configure/configure_capture.h	/^const int MIN_SPEECH_FRAMES = MIN_SPEECH_TIME * FRAME_PER_SECOND \/1000;$/;"	v
MIN_SPEECH_TIME	src/Configure/configure_capture.h	/^const double MIN_SPEECH_TIME = 200;$/;"	v
MatrixMul01	src/Feature/FeatureExtractor.cpp	/^SP_RESULT FeatureExtractor::MatrixMul01(Matrix<double> & melLog, \\$/;"	f	class:FeatureExtractor
Maximum	src/Feature/HMMAutomaton.h	/^        Maximum, $/;"	e	enum:HMMAutomaton::dtwType
NBitsPersample	src/readwave/readwave.h	/^	short NBitsPersample;$/;"	m	struct:WavFileHead
NChannels	src/readwave/readwave.h	/^	short NChannels;$/;"	m	struct:WavFileHead
NIL_BACK_PTR	src/Feature/SeqModel.h	30;"	d
NIL_EDGE	src/Feature/SeqModel.h	27;"	d
NIL_FORWARD	src/Feature/SeqModel.h	28;"	d
NONE	src/Configure/tool.h	45;"	d
NONE_BACK	src/Configure/tool.h	66;"	d
NONE_UPDATE	src/Feature/SeqModel.h	29;"	d
NO_RECORD	src/Feature/SeqModel.h	/^            NO_RECORD,$/;"	e	enum:SeqModel::SEQ_DTW_PATH_TYPE
NUM_CHANNELS	src/Configure/configure_basic.h	/^const int NUM_CHANNELS = 1; \/\/don't change$/;"	v
NoEmitState	src/Feature/NoEmitState.h	/^        NoEmitState() {}$/;"	f	class:NoEmitState
NoEmitState	src/Feature/NoEmitState.h	/^class NoEmitState : public HMMState {$/;"	c
Node	src/LexTree/LexTree.h	/^	Node(){$/;"	f	class:Node
Node	src/LexTree/LexTree.h	/^	Node(Node * pnt,char c,bool is_leaf,int nid,const char * w){$/;"	f	class:Node
Node	src/LexTree/LexTree.h	/^class Node{$/;"	c
NullSeg	src/Feature/KMeanState.cpp	/^const std::pair<int, int> KMeanState::NullSeg = std::make_pair(0, -1);$/;"	m	class:KMeanState	file:
NullSeg	src/Feature/KMeanState.h	/^        const static std::pair<int, int> NullSeg ;$/;"	m	class:KMeanState
OFFSET_THRESHOLD	src/Configure/configure_capture.h	/^const double OFFSET_THRESHOLD = -2;     \/\/increase in noise environment$/;"	v
ONLY_FILE_NAME	src/Feature/WaveFeatureOP.h	/^        ONLY_FILE_NAME,$/;"	e	enum:WaveFeatureOP::LOAD_TYPE
ONSET_THRESHOLD	src/Configure/configure_capture.h	/^const double ONSET_THRESHOLD = 10;      \/\/decrease in noise environment$/;"	v
OVERLAP_SIZE	src/Configure/configure_feature.h	/^const int OVERLAP_SIZE = OVERLAP_TIME\/1000.0 * SAMPLES_IN_EACH_FRAME;$/;"	v
OVERLAP_TIME	src/Configure/configure_feature.h	/^const int OVERLAP_TIME = 15;$/;"	v
OpType	src/Feature/WaveFeatureOP.h	/^    enum OpType {$/;"	g	class:WaveFeatureOP
P	src/Feature/Gaussian.cpp	/^double Gaussian::P(Feature *f){$/;"	f	class:Gaussian
PA_DATA_TYPE	src/Configure/configure_basic.h	47;"	d
PA_DATA_TYPE	src/Configure/configure_basic.h	52;"	d
PA_DATA_TYPE	src/Configure/configure_basic.h	57;"	d
PHONE_NUM_GRAPH_FILE	src/Configure/continuous_speech.h	1;"	d
PI	src/Feature/mathtool.h	/^const double PI = std::acos(-1);$/;"	v
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	240;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	243;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	246;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	249;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	252;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	255;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	258;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	261;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	264;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	267;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	270;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	273;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	276;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	279;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	282;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	285;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	288;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	291;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	294;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	297;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	300;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	303;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	306;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	309;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	312;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	315;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	233;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	236;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	239;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	242;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	245;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	248;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	251;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	254;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	257;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	260;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	263;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	266;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	269;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	272;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	275;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	278;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	281;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	284;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	287;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	290;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	293;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	296;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	299;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	302;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	305;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	308;"	d	file:
PRINTF_S_FORMAT	src/Configure/configure_basic.h	50;"	d
PRINTF_S_FORMAT	src/Configure/configure_basic.h	55;"	d
PRINTF_S_FORMAT	src/Configure/configure_basic.h	60;"	d
PRINT_DEBUG_FRAME_INF	src/Configure/configure_basic.h	/^const bool PRINT_DEBUG_FRAME_INF = true; \/\/ print the block energy,bg,etc.$/;"	v
PURPLE	src/Configure/tool.h	55;"	d
ParseGraph	build/Graph/parseGraph.h	/^        ParseGraph() {}$/;"	f	class:ParseGraph
ParseGraph	build/Graph/parseGraph.h	/^class ParseGraph {$/;"	c
ParseGraph	src/Graph/parseGraph.h	/^        ParseGraph() {}$/;"	f	class:ParseGraph
ParseGraph	src/Graph/parseGraph.h	/^class ParseGraph {$/;"	c
Path	src/EditDistance/path.h	/^	Path(){$/;"	f	struct:Path
Path	src/EditDistance/path.h	/^    Path(int m){$/;"	f	struct:Path
Path	src/EditDistance/path.h	/^struct Path {$/;"	s
Path	src/LexTree/spellcheck.h	/^	Path(){$/;"	f	struct:Path
Path	src/LexTree/spellcheck.h	/^struct Path{$/;"	s
PathSplitIdx	src/Feature/WaveFeatureOP.cpp	/^const int WaveFeatureOP::PathSplitIdx = -1;$/;"	m	class:WaveFeatureOP	file:
PathSplitIdx	src/Feature/WaveFeatureOP.h	/^    const static int PathSplitIdx;$/;"	m	class:WaveFeatureOP
Point2Clusters	src/Feature/SoftState.cpp	/^int SoftState::Point2Clusters(int templateIdx, int featureIdx) {$/;"	f	class:SoftState
READ_INIT_DECLARE	src/Configure/tool.h	91;"	d
READ_ONLY_DECLARE	src/Configure/tool.h	69;"	d
READ_WRITE_DECLARE	src/Configure/tool.h	86;"	d
RED	src/Configure/tool.h	46;"	d
RED_BACK	src/Configure/tool.h	62;"	d
REFERENCE_READ_ONLY_DECLARE	src/Configure/tool.h	77;"	d
RIFF	src/readwave/readwave.h	/^	char RIFF[4];$/;"	m	struct:WavFileHead
RM	build/Analysis/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.0.1\/bin\/cmake -E remove -f$/;"	m
RM	build/Capture/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.0.1\/bin\/cmake -E remove -f$/;"	m
RM	build/Configure/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.0.1\/bin\/cmake -E remove -f$/;"	m
RM	build/EditDistance/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.0.1\/bin\/cmake -E remove -f$/;"	m
RM	build/Feature/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.0.1\/bin\/cmake -E remove -f$/;"	m
RM	build/Graph/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.0.1\/bin\/cmake -E remove -f$/;"	m
RM	build/LexTree/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.0.1\/bin\/cmake -E remove -f$/;"	m
RM	build/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.0.1\/bin\/cmake -E remove -f$/;"	m
RM	build/ThreadPool/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.0.1\/bin\/cmake -E remove -f$/;"	m
RM	build/data/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.0.1\/bin\/cmake -E remove -f$/;"	m
RM	build/readwave/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.0.1\/bin\/cmake -E remove -f$/;"	m
RM	build/test/Makefile	/^RM = \/usr\/local\/Cellar\/cmake\/3.0.1\/bin\/cmake -E remove -f$/;"	m
Raw	src/Feature/Feature.h	/^        Raw,$/;"	e	enum:Feature::FeatureType
Raw	src/Feature/WaveFeatureOP.cpp	/^    opType(Raw), \\$/;"	v
Raw	src/Feature/WaveFeatureOP.h	/^        Raw,$/;"	e	enum:WaveFeatureOP::OpType
RawData	src/data/RawData.cpp	/^RawData::RawData()$/;"	f	class:RawData
RawData	src/data/RawData.cpp	/^RawData::RawData(const RawData& rawData){$/;"	f	class:RawData
RawData	src/data/RawData.h	/^class RawData{$/;"	c
RawDataFileLength	src/readwave/readwave.h	/^	int RawDataFileLength;$/;"	m	struct:WavFileHead
ReadWav	src/readwave/readwave.cpp	/^void ReadWav(const char *wavFile, short *waveData, int *numSamples, int *sampleRate)$/;"	f
ReadWavFile	src/readwave/readwave.cpp	/^short *ReadWavFile(const char *wavFile, int *numSamples, int *sampleRate )$/;"	f
ReadWave	src/readwave/readwave.cpp	/^short *ReadWave(const char *wavFile, int *numSamples, int *sampleRate ) $/;"	f
SAFE_DELETE_POINTER	src/Configure/tool.h	96;"	d
SAME	src/EditDistance/path.h	/^    DELETE,INSERT,SAME,CHANGE$/;"	e	enum:DIR
SAMPLE	src/Configure/configure_basic.h	/^typedef unsigned char SAMPLE;$/;"	t
SAMPLES_IN_EACH_FRAME	src/Configure/configure_basic.h	/^const int SAMPLES_IN_EACH_FRAME = SAMPLE_RATE \/ FRAME_PER_SECOND;$/;"	v
SAMPLE_RATE	src/Configure/configure_basic.h	/^const int SAMPLE_RATE = 16000; \/\/ 44100;  \/\/don't change$/;"	v
SAVE_DATA_DIR	src/Configure/configure_basic.h	/^const char  SAVE_DATA_DIR[] = ".\/";$/;"	v
SEG	src/Feature/HMMAutomaton.h	/^        SEG,$/;"	e	enum:HMMAutomaton::TRAIN_TYPE
SEGMENT_SIZE	src/Configure/configure_feature.h	/^const int SEGMENT_SIZE = SEGMENT_TIME\/1000.0 * SAMPLES_IN_EACH_FRAME;$/;"	v
SEGMENT_TIME	src/Configure/configure_feature.h	/^const int SEGMENT_TIME = 25;$/;"	v
SEQ	src/Feature/HMMAutomaton.h	/^        SEQ$/;"	e	enum:HMMAutomaton::TRAIN_TYPE
SEQ_DTW_PATH_TYPE	src/Feature/SeqModel.h	/^        enum SEQ_DTW_PATH_TYPE {$/;"	g	class:SeqModel
SHELL	build/Analysis/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/Capture/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/Configure/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/EditDistance/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/Feature/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/Graph/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/LexTree/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/ThreadPool/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/data/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/readwave/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	build/test/Makefile	/^SHELL = \/bin\/sh$/;"	m
SILENCE_ENERGY_THRESHOLD	src/Configure/configure_capture.h	/^const int  SILENCE_ENERGY_THRESHOLD  = 30;  \/\/ as lower as possible$/;"	v
SIMULATE_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	27;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	52;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	32;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	57;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	29;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	54;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	34;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	59;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	30;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	55;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	35;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	60;"	d	file:
SOFT	src/Feature/HMMState.h	/^            SOFT,$/;"	e	enum:HMMState::StateType
SOUND_DATA	src/Configure/configure_basic.h	/^typedef char SOUND_DATA;$/;"	t
SOUND_DATA	src/Configure/configure_basic.h	/^typedef short SOUND_DATA;$/;"	t
SP_ERROR_CODE	src/Configure/tool.cpp	/^const char * SP_ERROR_CODE(SP_RESULT ERROR_UID) {$/;"	f
SP_ERROR_CODE_GLOBAL	src/Configure/tool.cpp	/^const char *SP_ERROR_CODE_GLOBAL[] = {$/;"	v
SP_PREEMPH_FACTOR	src/Configure/configure_feature.h	/^const double SP_PREEMPH_FACTOR = 0.95;$/;"	v
SP_RESULT	src/Configure/tool.h	/^typedef int SP_RESULT;$/;"	t
SP_RESULT_CNT	src/Configure/tool.h	/^const int  SP_RESULT_CNT = 1$/;"	v
SP_SUCCESS	src/Configure/tool.h	/^    SP_SUCCESS$/;"	e	enum:ERROR_UIDS
STEPTIME	src/Configure/configure_feature.h	/^const double STEPTIME = 0.010;$/;"	v
STOP_IN_SECONDS	src/Configure/configure_basic.h	/^const double  STOP_IN_SECONDS = 1; \/\/ how many second to wait when in silent$/;"	v
SUFFIXES	build/Analysis/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/Capture/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/Configure/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/EditDistance/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/Feature/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/Graph/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/LexTree/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/ThreadPool/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/data/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/readwave/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	build/test/Makefile	/^SUFFIXES =$/;"	m
SampleBytes	src/readwave/readwave.h	/^	int SampleBytes;$/;"	m	struct:WavFileHead
SampleRate	src/readwave/readwave.h	/^	int SampleRate;$/;"	m	struct:WavFileHead
SeqEdge	src/Feature/SeqModel.h	/^struct SeqEdge {$/;"	s
SeqModel	src/Feature/SeqModel.cpp	/^SeqModel::SeqModel() : doBeam(false) {$/;"	f	class:SeqModel
SeqModel	src/Feature/SeqModel.h	/^class SeqModel {$/;"	c
SeqState	src/Feature/SeqModel.h	/^    SeqState() : hmmState(NULL), head(NIL_EDGE), leafForwardIdx(NIL_FORWARD), noEmitHead(-1), word(NULL) {$/;"	f	struct:SeqState
SeqState	src/Feature/SeqModel.h	/^struct SeqState {$/;"	s
SeqWav	src/Feature/HMMSeqTrainer.h	/^    SeqWav(WaveFeatureOP * wav, SeqModel * model) : wav(wav), model(model) {}$/;"	f	struct:SeqWav
SeqWav	src/Feature/HMMSeqTrainer.h	/^struct SeqWav {$/;"	s
SerialFiles	src/Configure/SerialFiles.cpp	/^SerialFiles::SerialFiles() {$/;"	f	class:SerialFiles
SerialFiles	src/Configure/SerialFiles.h	/^class SerialFiles {$/;"	c
Sigma	src/Feature/HMMAutomaton.h	/^        Sigma$/;"	e	enum:HMMAutomaton::dtwType
SoftNodeCost	src/Feature/SoftState.cpp	/^double SoftState::SoftNodeCost(Feature *f) {$/;"	f	class:SoftState
SoftState	src/Feature/SoftState.cpp	/^SoftState::SoftState(std::vector<WaveFeatureOP> * templates) : HMMState(templates) {$/;"	f	class:SoftState
SoftState	src/Feature/SoftState.h	/^class SoftState : public HMMState {$/;"	c
SoftTrain	src/Feature/SoftState.cpp	/^void SoftState::SoftTrain() {$/;"	f	class:SoftState
SpecificStateNum	src/Feature/HMMAutomatonSet.cpp	35;"	d	file:
SpecificStateNum	src/Feature/HMMAutomatonSet.cpp	38;"	d	file:
SpeechRecongnitionSystem_TimeCapture_h	src/Capture/AutoCapture.h	10;"	d
SpeechRecongnitionSystem_common_h	src/Configure/resource.h	10;"	d
SpeechRecongnitionSystem_configure_basic_h	src/Configure/configure_basic.h	10;"	d
SpeechRecongnitionSystem_configure_capture_h	src/Configure/configure_capture.h	10;"	d
SpeechRecongnitionSystem_configure_feature_h	src/Configure/configure_feature.h	10;"	d
SpeechRecongnitionSystem_configure_h	src/Configure/configure.h	10;"	d
SpeechRecongnitionSystem_srs_h	src/Configure/srs.h	10;"	d
SpeechRecongnitionSystem_tool_h	src/Configure/tool.h	10;"	d
SpellChecker	src/LexTree/spellcheck.cpp	/^SpellChecker::SpellChecker(){$/;"	f	class:SpellChecker
SpellChecker	src/LexTree/spellcheck.h	/^	SpellChecker(const char * dicFileName,int beam){	$/;"	f	class:SpellChecker
SpellChecker	src/LexTree/spellcheck.h	/^class SpellChecker$/;"	c
StateType	src/Feature/HMMState.h	/^        enum StateType {$/;"	g	class:HMMState
TASK_FUNC	src/ThreadPool/ThreadPool.h	/^typedef void (*TASK_FUNC)(void *) ;$/;"	t
TEMPLATES_DIR	src/Configure/configure_dtw.h	19;"	d
TESTING	src/Configure/tool.h	/^const int TESTING = true;$/;"	v
TRACKING_FACTOR	src/Configure/configure_capture.h	/^const double TRACKING_FACTOR = 0.01;    \/\/ small and track quikly(in silent)$/;"	v
TRAIN_TYPE	src/Feature/HMMAutomaton.h	/^    enum TRAIN_TYPE {$/;"	g	class:HMMAutomaton
TROPE	src/Configure/configure_hmm.h	11;"	d
TROPE_PENALTY	src/Configure/configure_hmm.h	13;"	d
TROPE_SILENCE	src/Configure/configure_hmm.h	12;"	d
Text	src/EditDistance/tmp/containerset.h	/^	set< Container<T> > Text;$/;"	m	class:ContainerSet
ThreadPool	src/ThreadPool/ThreadPool.cpp	/^ThreadPool::ThreadPool() : idx(0), threadNum(DEFAULT_THREAD_NUM) {$/;"	f	class:ThreadPool
ThreadPool	src/ThreadPool/ThreadPool.cpp	/^ThreadPool::ThreadPool(int threadNum) : idx(0), threadNum(threadNum) {$/;"	f	class:ThreadPool
ThreadPool	src/ThreadPool/ThreadPool.h	/^class ThreadPool {$/;"	c
Tip	src/Configure/tool.cpp	/^void Tip(const char * msg,...){$/;"	f
UNEMIT	src/Feature/HMMState.h	/^            UNEMIT$/;"	e	enum:HMMState::StateType
UNRESTRICTED_PHONE_NUM_GRAPH_FILE	src/Configure/continuous_speech.h	2;"	d
USERNAME_MAX_LEN	src/Configure/configure_dtw.h	23;"	d
WAVEfmt_	src/readwave/readwave.h	/^	char WAVEfmt_[8];$/;"	m	struct:WavFileHead
WAV_SUFFIX	src/Configure/configure_basic.h	12;"	d
WHITE	src/Configure/tool.h	60;"	d
WINTIME	src/Configure/configure_feature.h	/^const double WINTIME = 0.025; \/\/ sec$/;"	v
WORD_MAX_LEN	src/Configure/configure_dtw.h	22;"	d
WRITE_ONLY_DECLARE	src/Configure/tool.h	82;"	d
Warn	src/Configure/tool.cpp	/^void Warn(const char *msg,...){$/;"	f
WarnLog	src/Configure/tool.cpp	/^void WarnLog(const char *msg,...){$/;"	f
WavFileHead	src/readwave/readwave.h	/^struct WavFileHead$/;"	s
WaveFeatureOP	src/Feature/WaveFeatureOP.h	/^class WaveFeatureOP {$/;"	c
WaveFeatureOPSet	src/Feature/WaveFeatureOPSet.cpp	/^WaveFeatureOPSet::WaveFeatureOPSet(int maxInstancePer) : maxInstancePer(maxInstancePer) {}$/;"	f	class:WaveFeatureOPSet
WaveFeatureOPSet	src/Feature/WaveFeatureOPSet.h	/^class WaveFeatureOPSet {$/;"	c
WaveRewind	src/readwave/readwave.cpp	/^bool WaveRewind(FILE *wav_file, WavFileHead *wavFileHead)$/;"	f
WordDtwRecognition	src/Feature/WordDtwRecognition.cpp	/^WordDtwRecognition::WordDtwRecognition() : doTrainThreshold(false) {}$/;"	f	class:WordDtwRecognition
WordDtwRecognition	src/Feature/WordDtwRecognition.h	/^class WordDtwRecognition {$/;"	c
WriteWave	src/readwave/readwave.cpp	/^void WriteWave(const char *wavFile, short *waveData, int numSamples, int sampleRate)$/;"	f
YELLOW	src/Configure/tool.h	58;"	d
Ys2sNxtCost	src/Feature/HMMSoftAutomaton.h	/^        Matrix<double> Ys2sNxtCost;$/;"	m	class:HMMSoftAutomaton
YustCost	src/Feature/HMMSoftAutomaton.h	/^        std::vector<double> YustCost;$/;"	m	class:HMMSoftAutomaton
_AUTOGUARD_CONFIGURE_DTW_H_	src/Configure/configure_dtw.h	17;"	d
_AUTOGUARD_DummyState_H_	src/Feature/DummyState.h	17;"	d
_AUTOGUARD_Gaussian_H_	src/Feature/Gaussian.h	2;"	d
_AUTOGUARD_HMMAutomatonSet_H_	src/Feature/HMMAutomatonSet.h	16;"	d
_AUTOGUARD_HMMAutomaton_H_	src/Feature/HMMAutomaton.h	17;"	d
_AUTOGUARD_HMMKMeanAutomaton_H_	src/Feature/HMMKMeanAutomaton.h	17;"	d
_AUTOGUARD_HMMRecognition_H_	src/Feature/HMMRecognition.h	20;"	d
_AUTOGUARD_HMMSeqKMeanTrainer_H_	src/Feature/HMMSeqKMeanTrainer.h	17;"	d
_AUTOGUARD_HMMSeqRecognition_H_	src/Feature/HMMSeqRecognition.h	17;"	d
_AUTOGUARD_HMMSeqTrainer_H_	src/Feature/HMMSeqTrainer.h	17;"	d
_AUTOGUARD_HMMSoftAutomaton_H_	src/Feature/HMMSoftAutomaton.h	17;"	d
_AUTOGUARD_HMMState_H_	src/Feature/HMMState.h	17;"	d
_AUTOGUARD_KMeanState_H_	src/Feature/KMeanState.h	17;"	d
_AUTOGUARD_NoEmitState_H_	src/Feature/NoEmitState.h	17;"	d
_AUTOGUARD_ParseGraph_H_	build/Graph/parseGraph.h	17;"	d
_AUTOGUARD_ParseGraph_H_	src/Graph/parseGraph.h	17;"	d
_AUTOGUARD_SeqModel_H_	src/Feature/SeqModel.h	17;"	d
_AUTOGUARD_SerialFiles_H_	src/Configure/SerialFiles.h	19;"	d
_AUTOGUARD_SoftState_H_	src/Feature/SoftState.h	17;"	d
_AUTOGUARD_ThreadPool_H_	src/ThreadPool/ThreadPool.h	2;"	d
_AUTOGUARD_WaveFeatureOPSet_H_	src/Feature/WaveFeatureOPSet.h	19;"	d
_AUTOGUARD_WaveFeature_H_	src/Feature/WaveFeatureOP.h	19;"	d
_AUTOGUARD_WordDtwRecognition_H_	src/Feature/WordDtwRecognition.h	19;"	d
__PRO3__EDITDISTANCE__APP__	src/EditDistance/app.h	2;"	d
__PRO3__EDITDISTANCE__APP__	src/LexTree/app.h	2;"	d
__PRO3__EDITDISTANCE__CALC__	src/EditDistance/calcDist.h	2;"	d
__PRO3__EDITDISTANCE__CONF__	src/EditDistance/conf.h	2;"	d
__PRO3__EDITDISTANCE__CONTAINERSET__	src/EditDistance/tmp/containerset.h	2;"	d
__PRO3__EDITDISTANCE__CONTAINER__	src/EditDistance/tmp/container.h	2;"	d
__PRO3__EDITDISTANCE__PATH__	src/EditDistance/path.h	2;"	d
__PRO3__EDITDISTANCE__WORDCONTAINER__	src/EditDistance/tmp/wordcontainer.h	2;"	d
__PRO5__LEXTREE__LEXTREE_H__	src/LexTree/LexTree.h	2;"	d
__PRO5__LEXTREE__SPELL_CHECK_H__	src/LexTree/spellcheck.h	2;"	d
__SpeechRecongnitionSystem__AdaptiveEndPointAnalysis__	src/Analysis/AEPAnalysis.h	10;"	d
__SpeechRecongnitionSystem__BEPAnalysis__	src/Analysis/BEPAnalysis.h	10;"	d
__SpeechRecongnitionSystem__Capture__	src/Capture/Capture.h	10;"	d
__SpeechRecongnitionSystem__DAEPAnalysis__	src/Analysis/DAEPAnalysis.h	10;"	d
__SpeechRecongnitionSystem__EndPointAnalysis__	src/Analysis/EPAnalysis.h	10;"	d
__SpeechRecongnitionSystem__FeatureExtractor__	src/Feature/FeatureExtractor.h	10;"	d
__SpeechRecongnitionSystem__Feature__	src/Feature/Feature.h	10;"	d
__SpeechRecongnitionSystem__RawData__	src/data/RawData.h	10;"	d
__SpeechRecongnitionSystem__StringTool__	src/EditDistance/tmp/stringtool.h	2;"	d
__SpeechRecongnitionSystem__mathtool__	src/Feature/mathtool.h	10;"	d
__SpeechRecongnitionSystem__test__	src/test/test.h	10;"	d
_begin	src/Feature/WaveFeatureOPSet.h	/^    iterator _begin, _end;$/;"	m	class:WaveFeatureOPSet
_end	src/Feature/WaveFeatureOPSet.h	/^    iterator _begin, _end;$/;"	m	class:WaveFeatureOPSet
_word	src/Feature/WaveFeatureOP.cpp	/^    _word(word) {$/;"	f
abs	src/EditDistance/calcDist.h	/^int abs(int a){$/;"	f
accept	src/LexTree/spellcheck.h	/^	bool accept(int nid,int v, int column) {$/;"	f	class:Link
add	src/EditDistance/path.h	/^    void add(DIR t){$/;"	f	struct:Path
add	src/EditDistance/tmp/container.h	/^	void add(const T& t){items.push_back(t);}$/;"	f	class:Container
add	src/LexTree/LexTree.cpp	/^void LexTree::add(const char * word){$/;"	f	class:LexTree
addColumnNode	src/Feature/SeqModel.h	/^    void addColumnNode(int node) {$/;"	f	struct:Dtw_Column_Link
addFeature	src/Feature/Gaussian.cpp	/^void Gaussian::addFeature(Feature * f, double probability) {$/;"	f	class:Gaussian
addOneBlockDataWithEndFlag	src/Analysis/EPAnalysis.cpp	/^bool EPAnalysis::addOneBlockDataWithEndFlag(const SOUND_DATA * src){$/;"	f	class:EPAnalysis
addPath	src/EditDistance/path.h	/^	void addPath(const Path& p){$/;"	f	struct:Count
addTask	src/ThreadPool/ThreadPool.cpp	/^void ThreadPool::addTask(struct sp_task & task) {$/;"	f	class:ThreadPool
addTwoCluster	src/Feature/KMeanState.cpp	/^bool KMeanState::addTwoCluster(const Cluster * c, double smallNum)$/;"	f	class:KMeanState
addWaveMfcc	src/Feature/WaveFeatureOPSet.h	/^    void addWaveMfcc(char *word, WaveFeatureOP & newOP) {$/;"	f	class:WaveFeatureOPSet
adjustSkippingTransfer	src/Feature/HMMAutomaton.cpp	/^void HMMAutomaton::adjustSkippingTransfer() {$/;"	f	class:HMMAutomaton
alg	src/EditDistance/app.h	/^    int alg;$/;"	m	class:APP
alg	src/LexTree/app.h	/^    int alg;$/;"	m	class:APP
algo	src/hmm_demo.cpp	/^string algo = "kmean";$/;"	v
alphaCost	src/Feature/HMMSoftAutomaton.h	/^        Matrix<double> alphaCost, betaCost;$/;"	m	class:HMMSoftAutomaton
ansx	src/LexTree/spellcheck.h	/^	int ansx,ansy;$/;"	m	class:SpellChecker
ansy	src/LexTree/spellcheck.h	/^	int ansx,ansy;$/;"	m	class:SpellChecker
app	src/pro3_demo.cpp	/^APP app;$/;"	v
appendBlockData	src/data/RawData.cpp	/^bool RawData::appendBlockData(const SOUND_DATA * src){$/;"	f	class:RawData
articleSp	src/EditDistance/app.cpp	/^const char * articleSp = "\\n\\r";$/;"	v
articleSp	src/LexTree/app.cpp	/^const char * articleSp = "\\n\\r";$/;"	v
asynDtw	src/Feature/WaveFeatureOP.cpp	/^double WaveFeatureOP::asynDtw(std::vector<Feature> * inputFeature, double addThreshold) {$/;"	f	class:WaveFeatureOP
audspec	src/Matlab/rastamat/audspec.m	/^function [aspectrum,wts] = audspec(pspectrum, sr, nfilts, fbtype, minfreq, maxfreq, sumpower, bwidth)$/;"	f
automatons	src/Feature/HMMAutomatonSet.h	/^        std::map< std::string, HMMAutomaton *> automatons;$/;"	m	class:HMMAutomatonSet
automatons	src/Feature/HMMRecognition.h	/^        HMMAutomatonSet automatons;$/;"	m	class:HMMRecognition
backPtr	src/Feature/SeqModel.h	/^    int backPtr; \/\/ link to this-state's backPtr, for no emit state$/;"	m	struct:Dtw_Column_Node
backPtrs	src/Feature/SeqModel.h	/^        std::vector< BackPtr > backPtrs;$/;"	m	class:SeqModel
background	src/Analysis/EPAnalysis.h	/^    vector<double> background;$/;"	m	class:EPAnalysis
bark2hz	src/Matlab/rastamat/bark2hz.m	/^function hz=bark2hz(z)$/;"	f
beam	src/EditDistance/conf.h	/^    static int beam;$/;"	m	class:Conf
beam	src/LexTree/spellcheck.h	/^	int beam;$/;"	m	class:Link
beam	src/LexTree/spellcheck.h	/^	int beam;$/;"	m	class:SpellChecker
beam	src/pro3_demo.cpp	/^int Conf::beam = 3;$/;"	m	class:Conf	file:
beamThr	src/Feature/SeqModel.h	/^        double beamThr;$/;"	m	class:SeqModel
beforeAlphaBeta	src/Feature/HMMSoftAutomaton.cpp	/^void HMMSoftAutomaton::beforeAlphaBeta(WaveFeatureOP & features) {$/;"	f	class:HMMSoftAutomaton
begin	src/Feature/WaveFeatureOPSet.h	/^        iterator begin() {$/;"	f	class:WaveFeatureOPSet
betaCost	src/Feature/HMMSoftAutomaton.h	/^        Matrix<double> alphaCost, betaCost;$/;"	m	class:HMMSoftAutomaton
better	src/EditDistance/app.h	/^    vector<int> better;$/;"	m	class:APP
better	src/Feature/Feature.h	/^    static bool better(double a, double b) {$/;"	f	class:Feature
better	src/LexTree/app.h	/^    vector<int> better;$/;"	m	class:APP
block_num	src/Analysis/EPAnalysis.h	/^    int block_num ;$/;"	m	class:EPAnalysis
buildModel	src/Feature/SeqModel.cpp	/^void SeqModel::buildModel(const ParseGraph & graph, std::map< std::string, HMMAutomaton *> & automatons) {$/;"	f	class:SeqModel
buildModels	src/Feature/HMMSeqTrainer.cpp	/^void HMMSeqTrainer::buildModels(WaveFeatureOPSet::dataSetType & dataSet, std::map<std::string, HMMAutomaton *> & automatons, std::vector<WaveFeatureOP *> &mixedWavs) {$/;"	f	class:HMMSeqTrainer
buildSeqModel	src/Feature/HMMSeqRecognition.cpp	/^void HMMSeqRecognition::buildSeqModel() {$/;"	f	class:HMMSeqRecognition
buildTree	src/LexTree/LexTree.cpp	/^void LexTree::buildTree(const char * fileName){$/;"	f	class:LexTree
buildTree	src/LexTree/LexTree.cpp	/^void LexTree::buildTree(const vector<string> &  words){$/;"	f	class:LexTree
c	src/LexTree/LexTree.h	/^	char c;$/;"	m	class:Node
cStory	src/EditDistance/app.h	/^    vector<string> cStory;$/;"	m	class:APP
cStory	src/LexTree/app.h	/^    vector<string> cStory;$/;"	m	class:APP
calDist	src/Feature/WaveFeatureOP.h	/^    double calDist(int rowIdx, int columnIdx) {$/;"	f	class:WaveFeatureOP
calcAllWithThread	src/EditDistance/app.cpp	/^int APP::calcAllWithThread(){$/;"	f	class:APP
calcAllWithThread	src/LexTree/app.cpp	/^int APP::calcAllWithThread(){$/;"	f	class:APP
calcAlphaBeta	src/Feature/HMMSoftAutomaton.cpp	/^void HMMSoftAutomaton::calcAlphaBeta(WaveFeatureOP & features) {$/;"	f	class:HMMSoftAutomaton
calcCost	src/Feature/HMMKmeanAutomaton.cpp	/^double HMMKMeanAutomaton::calcCost(WaveFeatureOP &input) {$/;"	f	class:HMMKMeanAutomaton
calcCost	src/Feature/HMMSoftAutomaton.cpp	/^double HMMSoftAutomaton::calcCost(WaveFeatureOP &input) {$/;"	f	class:HMMSoftAutomaton
calcFirstCluster	src/Feature/KMeanState.cpp	/^int KMeanState::calcFirstCluster(){$/;"	f	class:KMeanState
calcIndex	src/EditDistance/app.cpp	/^void APP::calcIndex(const vector<string>& org,$/;"	f	class:APP
calcIndex	src/LexTree/app.cpp	/^void APP::calcIndex(const vector<string>& org,$/;"	f	class:APP
calcOne	src/EditDistance/app.cpp	/^int APP::calcOne(){$/;"	f	class:APP
calcOne	src/LexTree/app.cpp	/^int APP::calcOne(){$/;"	f	class:APP
calcOneBlockBackground	src/Analysis/AEPAnalysis.cpp	/^void AEPAnalysis::calcOneBlockBackground(int index) {$/;"	f	class:AEPAnalysis
calcOneBlockBackground	src/Analysis/BEPAnalysis.cpp	/^void BEPAnalysis::calcOneBlockBackground(int index){$/;"	f	class:BEPAnalysis
calcOneBlockBackground	src/Analysis/DAEPAnalysis.cpp	/^void DAEPAnalysis::calcOneBlockBackground(int index){$/;"	f	class:DAEPAnalysis
calcOneBlockData	src/Analysis/EPAnalysis.cpp	/^void EPAnalysis::calcOneBlockData(int index){$/;"	f	class:EPAnalysis
calcOneBlockEnerge	src/Analysis/EPAnalysis.cpp	/^void EPAnalysis::calcOneBlockEnerge(int index){$/;"	f	class:EPAnalysis
calcOneBlockOtherData	src/Analysis/AEPAnalysis.cpp	/^void AEPAnalysis::calcOneBlockOtherData(int index) {$/;"	f	class:AEPAnalysis
calcOneBlockOtherData	src/Analysis/EPAnalysis.h	/^    virtual void calcOneBlockOtherData(int index) {};$/;"	f	class:EPAnalysis
calcOneBlockSpeech	src/Analysis/AEPAnalysis.cpp	/^void AEPAnalysis::calcOneBlockSpeech(int index) {$/;"	f	class:AEPAnalysis
calcOneBlockSpeech	src/Analysis/BEPAnalysis.cpp	/^void BEPAnalysis::calcOneBlockSpeech(int index){$/;"	f	class:BEPAnalysis
calcOneBlockSpeech	src/Analysis/DAEPAnalysis.cpp	/^void DAEPAnalysis::calcOneBlockSpeech(int index){$/;"	f	class:DAEPAnalysis
calcOneWithDic	src/EditDistance/app.cpp	/^int APP::calcOneWithDic(){$/;"	f	class:APP
calcOneWithDic	src/LexTree/app.cpp	/^int APP::calcOneWithDic(){$/;"	f	class:APP
callback	src/Capture/Capture.h	/^    PaStreamCallback* callback;$/;"	m	class:Capture
capture	src/Capture/Capture.cpp	/^bool Capture::capture(RawData * data){$/;"	f	class:Capture
capture	src/test/test.cpp	/^void capture(const char * save_file_name,$/;"	f
capture	src/test/test.cpp	/^void capture(const char *save_file_name, RawData &data, bool playback) {$/;"	f
captureAction	src/Capture/AutoCapture.cpp	/^bool AutoCapture::captureAction(RawData * data){$/;"	f	class:AutoCapture
captureAction	src/Capture/Capture.cpp	/^bool Capture::captureAction(RawData * data){$/;"	f	class:Capture
captureRun	src/recorder.cpp	/^void captureRun(bool playback) {$/;"	f
cep2spec	src/Matlab/rastamat/cep2spec.m	/^function [spec,idctm] = cep2spec(cep, nfreq, type)$/;"	f
cepsNum	src/Feature/FeatureExtractor.h	/^            cepsNum(CEPS_NUM) {}$/;"	f	class:FeatureExtractor
change	src/EditDistance/path.h	/^	int change;$/;"	m	struct:Count
changeSilentSegmentIntoSpeech	src/Analysis/EPAnalysis.cpp	/^void EPAnalysis::changeSilentSegmentIntoSpeech(){$/;"	f	class:EPAnalysis
changeSpeechSegmentIntoSilent	src/Analysis/EPAnalysis.cpp	/^void EPAnalysis::changeSpeechSegmentIntoSilent(){$/;"	f	class:EPAnalysis
charInStr	src/EditDistance/stringtool.cpp	/^bool charInStr(const char& c, const char* str){$/;"	f
check	src/EditDistance/tmp/container.h	/^	bool check(int i,const T& a)const{$/;"	f	class:Container
check	src/LexTree/LexTree.h	/^	bool check(char c,bool is_leaf){$/;"	f	class:Node
check	src/LexTree/spellcheck.cpp	/^int SpellChecker::check(const char * word,bool one,bool use_path){$/;"	f	class:SpellChecker
checkContinue	src/Analysis/EPAnalysis.cpp	/^bool EPAnalysis::checkContinue(){$/;"	f	class:EPAnalysis
checkSelf	src/LexTree/spellcheck.h	/^	void checkSelf(){$/;"	f	class:Link
clean	src/data/RawData.cpp	/^void RawData::clean(){$/;"	f	class:RawData
clear	src/Feature/HMMAutomatonSet.cpp	/^void HMMAutomatonSet::clear() {$/;"	f	class:HMMAutomatonSet
clear	src/Feature/SeqModel.h	/^    void clear() {$/;"	f	struct:Dtw_Column_Link
clear	src/LexTree/spellcheck.h	/^	void clear(){$/;"	f	class:Link
clearCluster	src/Feature/KMeanState.cpp	/^void KMeanState::clearCluster(){$/;"	f	class:KMeanState
clearGaussian	src/Feature/KMeanState.cpp	/^void KMeanState::clearGaussian()$/;"	f	class:KMeanState
clearGaussian	src/Feature/SoftState.cpp	/^void SoftState::clearGaussian() {$/;"	f	class:SoftState
clearStates	src/Feature/HMMAutomaton.cpp	/^void HMMAutomaton::clearStates() {$/;"	f	class:HMMAutomaton
clearTrainBuffer	src/Feature/HMMKMeanAutomaton.h	/^        void clearTrainBuffer() {$/;"	f	class:HMMKMeanAutomaton
clearTrainBuffer	src/Feature/HMMSoftAutomaton.h	/^        void clearTrainBuffer() {$/;"	f	class:HMMSoftAutomaton
close	src/Feature/HMMAutomaton.cpp	/^void HMMAutomaton::close() {$/;"	f	class:HMMAutomaton
close	src/Feature/HMMRecognition.cpp	/^void HMMRecognition::close() {$/;"	f	class:HMMRecognition
close	src/Feature/HMMSeqRecognition.cpp	/^void HMMSeqRecognition::close() {$/;"	f	class:HMMSeqRecognition
close	src/Feature/SeqModel.cpp	/^void SeqModel::close() {$/;"	f	class:SeqModel
cmp	src/LexTree/LexTree.cpp	/^bool cmp(const string& a,const string& b){$/;"	f
cmp_task	src/EditDistance/app.cpp	/^void APP::cmp_task(void * in){$/;"	f	class:APP
cmp_task	src/LexTree/app.cpp	/^void APP::cmp_task(void * in){$/;"	f	class:APP
cmp_task_info	src/EditDistance/app.h	/^struct cmp_task_info$/;"	s
cmp_task_info	src/LexTree/app.h	/^struct cmp_task_info$/;"	s
collectBestPath	src/Feature/SeqModel.cpp	/^void SeqModel::collectBestPath( std::vector<int> &path, int wavSiz ) {$/;"	f	class:SeqModel
collectRes	src/Feature/SeqModel.cpp	/^void SeqModel::collectRes(std::vector<std::string> &res, SEQ_DTW_PATH_TYPE path_type, int wavSiz) {$/;"	f	class:SeqModel
collectResFromBackPtr	src/Feature/SeqModel.cpp	/^void SeqModel::collectResFromBackPtr(std::vector<std::string> &res){$/;"	f	class:SeqModel
collectResFromFullPath	src/Feature/SeqModel.cpp	/^void SeqModel::collectResFromFullPath(std::vector<std::string> &res, int wavSiz) {$/;"	f	class:SeqModel
columnDtwRes	src/Feature/WaveFeatureOP.h	/^    std::vector<double> columnDtwRes[2];$/;"	m	class:WaveFeatureOP
columnIdx	src/Feature/WaveFeatureOP.h	/^    int columnIdx;$/;"	m	class:WaveFeatureOP
columnNxt	src/Feature/WaveFeatureOP.h	/^    std::vector<int> columnNxt[2];$/;"	m	class:WaveFeatureOP
compare	src/EditDistance/calcDist.h	/^static int compare(const T&  a,const T& b,Path* path = NULL){$/;"	f
compare	src/EditDistance/calcDist.h	/^static int compare(const T&  a,const T& b,int max_val,Path * path = NULL){$/;"	f
compareOneWithDict	src/EditDistance/calcDist.h	/^static int compareOneWithDict(const char * w,$/;"	f
compareWithBeam	src/EditDistance/calcDist.h	/^static int compareWithBeam(const T&  a,const T& b,$/;"	f
compareWithFixedThreshold	src/EditDistance/calcDist.h	/^static int compareWithFixedThreshold(const T&  a,const T& b,$/;"	f
copy	src/Feature/Gaussian.h	/^	void copy(Gaussian * g, double dt){$/;"	f	class:Gaussian
copyBlockData	src/data/RawData.cpp	/^void RawData::copyBlockData(int from,int to){$/;"	f	class:RawData
corectWithBKTree	src/EditDistance/tmp/containerset.h	/^	virtual bool corectWithBKTree(const char * file_dic, $/;"	f	class:ContainerSet
corectWithDic	src/EditDistance/tmp/containerset.h	/^	virtual bool corectWithDic(const char * file_name){$/;"	f	class:ContainerSet
cost	src/Feature/SeqModel.h	/^    double cost; \/\/ p2cost$/;"	m	struct:SeqEdge
cost	src/Feature/SeqModel.h	/^    double cost;$/;"	m	struct:Dtw_Column_Node
cost2p	src/Feature/mathtool.cpp	/^double cost2p(double cost) {$/;"	f
cp	src/Feature/mathtool.h	/^typedef std::complex<double> cp;$/;"	t
create	src/LexTree/spellcheck.h	/^	void create(int x,int y,int px,int py){$/;"	f	struct:Path
createNoise	src/test/test.cpp	/^void createNoise(const char * file_name){$/;"	f
cut	src/Analysis/EPAnalysis.cpp	/^void EPAnalysis::cut(){$/;"	f	class:EPAnalysis
cvar	src/Feature/Gaussian.h	/^	double*  cvar;$/;"	m	class:Gaussian
data	src/Analysis/EPAnalysis.h	/^    RawData * data() {$/;"	f	class:EPAnalysis
data	src/Feature/Feature.h	/^    std::vector<double> data;$/;"	m	class:Feature
data	src/data/RawData.h	/^    SOUND_DATA * data;$/;"	m	class:RawData
data	src/readwave/readwave.h	/^	char data[4];$/;"	m	struct:WavFileHead
dataSet	src/Feature/WaveFeatureOPSet.h	/^                dataSetType *dataSet;$/;"	m	class:WaveFeatureOPSet::iterator
dataSet	src/Feature/WaveFeatureOPSet.h	/^    dataSetType dataSet;$/;"	m	class:WaveFeatureOPSet
dataSetType	src/Feature/WaveFeatureOPSet.h	/^        typedef std::map< std::string, std::vector<WaveFeatureOP> > dataSetType;$/;"	t	class:WaveFeatureOPSet
dct	src/Feature/mathtool.cpp	/^void dct(double *a,int n,int f)$/;"	f
dct2	src/Feature/mathtool.cpp	/^void dct2(double *a, int n) {$/;"	f
dealOpts	src/hmm_demo.cpp	/^bool dealOpts(int argc, char **argv) {$/;"	f
dealOpts	src/pro2_demo.cpp	/^bool dealOpts(int argc, char **argv) {$/;"	f
dealOpts	src/pro3_demo.cpp	/^int dealOpts(int argc,char ** argv){$/;"	f
dealOpts	src/pro4_demo_1.cpp	/^bool dealOpts(int argc, char **argv) {$/;"	f
dealOpts	src/pro5_demo.cpp	/^int dealOpts(int argc,char ** argv){$/;"	f
dealOpts	src/pro6_demo.cpp	/^bool dealOpts(int argc, char **argv) {$/;"	f
dealOpts	src/rawdtw.cpp	/^bool dealOpts(int argc, char **argv) {$/;"	f
dealOpts	src/recorder.cpp	/^bool dealOpts(int argc, char **argv) {$/;"	f
debug	src/EditDistance/conf.h	/^    static int debug;$/;"	m	class:Conf
debug	src/pro3_demo.cpp	/^int Conf::debug = 0;$/;"	m	class:Conf	file:
del	src/EditDistance/path.h	/^	int del;$/;"	m	struct:Count
deleteCluster	src/Feature/KMeanState.cpp	/^void KMeanState::deleteCluster(Cluster * c)$/;"	f	class:KMeanState
deltas	src/Matlab/rastamat/deltas.m	/^function d = deltas(x, w)$/;"	f
demoType	src/hmm_demo.cpp	/^int demoType = 0;$/;"	v
demoType	src/pro4_demo_1.cpp	/^int demoType = 0;$/;"	v
dft	src/Feature/mathtool.cpp	/^void dft(cp *a,int n,int f)$/;"	f
dic	src/EditDistance/app.h	/^    vector<string> dic;$/;"	m	class:APP
dic	src/LexTree/app.h	/^    vector<string> dic;$/;"	m	class:APP
dict	src/EditDistance/app.h	/^    vector<string> * dict;$/;"	m	struct:cmp_task_info
dict	src/LexTree/app.h	/^    vector<string> * dict;$/;"	m	struct:cmp_task_info
dir	src/EditDistance/path.h	/^    DIR * dir;$/;"	m	struct:Path
dir	src/recorder.cpp	/^char dir[100] = TEMPLATES_DIR; \/\/".\/templates";$/;"	v
doBeam	src/Feature/SeqModel.h	/^        bool doBeam;$/;"	m	class:SeqModel
dolpc	src/Matlab/rastamat/dolpc.m	/^function y = dolpc(x,modelorder)$/;"	f
done	src/Feature/Gaussian.cpp	/^bool Gaussian::done(){$/;"	f	class:Gaussian
doubleDelta	src/Feature/FeatureExtractor.cpp	/^void FeatureExtractor::doubleDelta(std::vector<Feature> & normalMelCeps) {$/;"	f	class:FeatureExtractor
dtw	src/Feature/SeqModel.cpp	/^void SeqModel::dtw(WaveFeatureOP & wav, SEQ_DTW_PATH_TYPE path_type) {$/;"	f	class:SeqModel
dtwType	src/Feature/HMMAutomaton.h	/^    enum dtwType {$/;"	g	class:HMMAutomaton
dump	build/Graph/parseGraph.cpp	/^void ParseGraph::dump(std::ostream & out) const {$/;"	f	class:ParseGraph
dump	src/Feature/SoftState.h	/^        void dump() {$/;"	f	class:SoftState
dump	src/Graph/parseGraph.cpp	/^void ParseGraph::dump(std::ostream & out) const {$/;"	f	class:ParseGraph
dumpAutomaton	src/Feature/HMMAutomatonSet.cpp	/^void HMMAutomatonSet::dumpAutomaton(std::ostream & out) {$/;"	f	class:HMMAutomatonSet
dumpAutomaton	src/Feature/HMMRecognition.cpp	/^void HMMRecognition::dumpAutomaton(std::ostream & out) {$/;"	f	class:HMMRecognition
dumpColorPath	src/Feature/WaveFeatureOP.cpp	/^SP_RESULT WaveFeatureOP::dumpColorPath(std::ostream & Out) {$/;"	f	class:WaveFeatureOP
dumpColorPath	src/Feature/WordDtwRecognition.cpp	/^void WordDtwRecognition::dumpColorPath(std::ostream &Out) {$/;"	f	class:WordDtwRecognition
dumpDelta	src/Feature/Feature.h	/^    void dumpDelta(int from, int to, int siz) {$/;"	f	class:Feature
dumpDot	src/Feature/SeqModel.cpp	/^void SeqModel::dumpDot(std::ostream &out) {$/;"	f	class:SeqModel
dumpTransfer	src/Feature/HMMAutomaton.cpp	/^void HMMAutomaton::dumpTransfer(std::ostream & out) {$/;"	f	class:HMMAutomaton
e	src/Feature/mathtool.h	35;"	d
edgePoints	src/Feature/KMeanState.h	/^        std::vector< std::pair<int, int> > edgePoints;$/;"	m	class:KMeanState
edges	build/Graph/parseGraph.h	/^        std::vector< GraphEdge > edges;$/;"	m	class:ParseGraph
edges	src/Feature/SeqModel.h	/^        std::vector<SeqEdge>  edges;$/;"	m	class:SeqModel
edges	src/Graph/parseGraph.h	/^        std::vector< GraphEdge > edges;$/;"	m	class:ParseGraph
end	src/Capture/Capture.cpp	/^bool Capture::end(){$/;"	f	class:Capture
end	src/Feature/WaveFeatureOPSet.h	/^        iterator end() {$/;"	f	class:WaveFeatureOPSet
enddingProbability	src/Feature/HMMAutomaton.cpp	/^double HMMAutomaton::enddingProbability(int stateID) {$/;"	f	class:HMMAutomaton
energy	src/Analysis/EPAnalysis.h	/^    vector<double> energy;$/;"	m	class:EPAnalysis
ep	src/Capture/AutoCapture.h	/^    EPAnalysis * ep;$/;"	m	class:AutoCapture
euDist	src/Feature/Gaussian.cpp	/^double Gaussian::euDist(Feature* f){$/;"	f	class:Gaussian
exDoubleDeltaFeatures	src/Feature/FeatureExtractor.cpp	/^SP_RESULT FeatureExtractor::exDoubleDeltaFeatures(const RawData *data) {$/;"	f	class:FeatureExtractor
exFeatures	src/Feature/FeatureExtractor.cpp	/^SP_RESULT FeatureExtractor::exFeatures(const RawData *data) {$/;"	f	class:FeatureExtractor
exFeatures	src/Feature/FeatureExtractor.cpp	/^SP_RESULT FeatureExtractor::exFeatures(const RawData *data, \\$/;"	f	class:FeatureExtractor
false	src/Feature/WaveFeatureOP.cpp	/^    doRecordPath(false), \\$/;"	v
featureSize	src/Feature/Gaussian.h	/^	int featureSize;$/;"	m	class:Gaussian
fft	src/Feature/mathtool.cpp	/^void fft(cp *a,int n,int f)$/;"	f
fft2MelLog	src/Feature/FeatureExtractor.cpp	/^SP_RESULT FeatureExtractor::fft2MelLog(int nfft, \\$/;"	f	class:FeatureExtractor
fft2barkmx	src/Matlab/rastamat/fft2barkmx.m	/^function wts = fft2barkmx(nfft, sr, nfilts, width, minfreq, maxfreq)$/;"	f
fft2melmx	src/Matlab/rastamat/fft2melmx.m	/^function [wts,binfrqs] = fft2melmx(nfft, sr, nfilts, width, minfrq, maxfrq, htkmel, constamp)$/;"	f
fftPadding	src/Feature/FeatureExtractor.cpp	/^SP_RESULT FeatureExtractor::fftPadding(Matrix<double> & windows) {$/;"	f	class:FeatureExtractor
fftTask	src/Feature/FeatureExtractor.cpp	/^void FeatureExtractor::fftTask(void *in) {$/;"	f	class:FeatureExtractor
fft_task_info	src/Feature/FeatureExtractor.h	/^    struct fft_task_info {$/;"	s	class:FeatureExtractor
fillDelta	src/Feature/Feature.cpp	/^SP_RESULT Feature::fillDelta() {$/;"	f	class:Feature
fillDoubleDelta	src/Feature/Feature.cpp	/^SP_RESULT Feature::fillDoubleDelta() {$/;"	f	class:Feature
findBigCluster	src/Feature/KMeanState.cpp	/^Cluster* KMeanState::findBigCluster()$/;"	f	class:KMeanState
findOrAddson	src/LexTree/LexTree.h	/^	Node* findOrAddson(char c,bool is_leaf,int& nid,const char * w){$/;"	f	class:Node
firstNode	src/LexTree/spellcheck.h	/^	int firstNode;$/;"	m	class:Link
flag	src/Feature/Gaussian.h	/^	int flag;$/;"	m	class:Gaussian
forwardColumn	src/Feature/SeqModel.cpp	/^double SeqModel::forwardColumn(Dtw_Column_Link *link, WaveFeatureOP & wav, int columnIdx, double threshold) {$/;"	f	class:SeqModel
forwardColumn	src/Feature/WaveFeatureOP.cpp	/^double WaveFeatureOP::forwardColumn(double threshold) {$/;"	f	class:WaveFeatureOP
forwardCost	src/Feature/SeqModel.h	/^    double forwardCost;$/;"	m	struct:SeqState
from	build/Graph/parseGraph.h	/^    int from, to;$/;"	m	struct:GraphEdge
from	src/Graph/parseGraph.h	/^    int from, to;$/;"	m	struct:GraphEdge
fromFileJob	src/EditDistance/app.cpp	/^bool APP::fromFileJob(){$/;"	f	class:APP
fromFileJob	src/LexTree/app.cpp	/^bool APP::fromFileJob(){$/;"	f	class:APP
fullPath	src/Feature/SeqModel.h	/^        Matrix<int> fullPath;$/;"	m	class:SeqModel
fullfill	src/Configure/SerialFiles.cpp	/^char *SerialFiles::fullfill(int num) {$/;"	f	class:SerialFiles
func	src/ThreadPool/ThreadPool.h	/^    TASK_FUNC func;$/;"	m	struct:sp_task
g	src/Feature/KMeanState.h	/^	Gaussian * g;$/;"	m	struct:Cluster
gaussNum	src/Feature/HMMRecognition.h	/^        int gaussNum;$/;"	m	class:HMMRecognition
gaussNum	src/hmm_demo.cpp	/^int gaussNum = GAUSSIAN_NUM;$/;"	v
gaussianTrain	src/Feature/DummyState.h	/^        void gaussianTrain(int gaussianNum) {$/;"	f	class:DummyState
gaussianTrain	src/Feature/KMeanState.cpp	/^void KMeanState::gaussianTrain(int gaussianNum)$/;"	f	class:KMeanState
gaussianTrain	src/Feature/NoEmitState.h	/^        void gaussianTrain(int gaussianNum) {}$/;"	f	class:NoEmitState
gaussianTrain	src/Feature/SoftState.cpp	/^void SoftState::gaussianTrain(int gaussianNum) {$/;"	f	class:SoftState
gaussianTrainTest	src/Feature/SoftState.cpp	/^void SoftState::gaussianTrainTest(int gaussianNum) {$/;"	f	class:SoftState
generateHMMFileName	src/Feature/HMMRecognition.cpp	/^string HMMRecognition::generateHMMFileName() {$/;"	f	class:HMMRecognition
generateInit	src/Feature/SoftState.cpp	/^void SoftState::generateInit( Feature & feature) {$/;"	f	class:SoftState
generateInitFeature	src/Feature/KMeanState.cpp	/^void KMeanState::generateInitFeature(Feature &initFeature,$/;"	f	class:KMeanState
getAutomatons	src/Feature/HMMAutomatonSet.h	/^        std::map< std::string, HMMAutomaton *> & getAutomatons() {$/;"	f	class:HMMAutomatonSet
getBanner	src/hmm_demo.cpp	/^string getBanner(string word) {$/;"	f
getBeginning	src/recorder.cpp	/^static int getBeginning(char *prefix) {$/;"	f	file:
getBestTemplate	src/Feature/WordDtwRecognition.cpp	/^const WaveFeatureOP * WordDtwRecognition::getBestTemplate() {$/;"	f	class:WordDtwRecognition
getBlockAveEnergy	src/data/RawData.cpp	/^double RawData::getBlockAveEnergy(int index){$/;"	f	class:RawData
getC	src/LexTree/LexTree.h	/^	char getC(){$/;"	f	class:Node
getCVar	src/Feature/Gaussian.cpp	/^double Gaussian::getCVar(){$/;"	f	class:Gaussian
getDB	src/Feature/FeatureExtractor.h	/^    static double getDB(double pow) {$/;"	f	class:FeatureExtractor
getData	src/data/RawData.cpp	/^const SOUND_DATA * RawData::getData()const{$/;"	f	class:RawData
getFeatureType	src/Feature/Feature.cpp	/^Feature::FeatureType Feature::getFeatureType() {$/;"	f	class:Feature
getFirst	src/LexTree/spellcheck.h	/^	int getFirst(){$/;"	f	class:Link
getMfccFileName	src/Configure/SerialFiles.h	/^        static std::string getMfccFileName(std::string wavFileName) {$/;"	f	class:SerialFiles
getMin	src/LexTree/spellcheck.h	/^	int getMin(int& index){$/;"	f	class:Link
getNid	src/LexTree/LexTree.h	/^	int getNid(){$/;"	f	class:Node
getNodeSize	src/LexTree/LexTree.h	/^	int getNodeSize(){$/;"	f	class:LexTree
getParent	src/LexTree/LexTree.h	/^	Node* getParent(){$/;"	f	class:Node
getPnt	src/LexTree/LexTree.h	/^	Node* getPnt(){$/;"	f	class:Node
getRollIdx	src/Feature/HMMAutomaton.h	/^    inline int getRollIdx(int columnIdx) {$/;"	f	class:HMMAutomaton
getRollIdx	src/Feature/SeqModel.h	/^        int getRollIdx(int columnIdx) {$/;"	f	class:SeqModel
getRollIdx	src/Feature/WaveFeatureOP.h	/^    inline int getRollIdx(int columnIdx) {$/;"	f	class:WaveFeatureOP
getRowNum	src/Feature/WaveFeatureOP.cpp	/^int WaveFeatureOP::getRowNum() {$/;"	f	class:WaveFeatureOP
getSerialFileName	src/Configure/SerialFiles.cpp	/^void SerialFiles::getSerialFileName(char * out, int seqNum, int prefixNum, ...) {$/;"	f	class:SerialFiles
getSon	src/LexTree/LexTree.h	/^	Node* getSon(int index){$/;"	f	class:Node
getSonSize	src/LexTree/LexTree.h	/^	int getSonSize(){$/;"	f	class:Node
getSpecificStateNum	src/Feature/HMMAutomatonSet.cpp	/^int HMMAutomatonSet::getSpecificStateNum( std::string &word ) {$/;"	f	class:HMMAutomatonSet
getState	src/Feature/HMMKMeanAutomaton.h	/^        inline KMeanState *getState(int idx) {$/;"	f	class:HMMKMeanAutomaton
getState	src/Feature/HMMSoftAutomaton.h	/^        inline SoftState *getState(int idx) {$/;"	f	class:HMMSoftAutomaton
getStrsFromFile	src/EditDistance/stringtool.cpp	/^bool  getStrsFromFile($/;"	f
getStrsFromFile	src/EditDistance/stringtool.cpp	/^string getStrsFromFile(const char *FileName)$/;"	f
getVal	src/LexTree/spellcheck.h	/^	LinkNode * getVal(){$/;"	f	class:Link
getWavFileNames	src/Configure/SerialFiles.h	/^        static void getWavFileNames(char *dir, std::vector<std::string> &wavFileNames) {$/;"	f	class:SerialFiles
getWord	src/LexTree/LexTree.h	/^	char * getWord(){$/;"	f	class:Node
getWord	src/LexTree/spellcheck.h	/^	char * getWord(int index){$/;"	f	class:SpellChecker
getWts	src/Feature/FeatureExtractor.cpp	/^SP_RESULT FeatureExtractor::getWts(Matrix<double> &wts, \\$/;"	f	class:FeatureExtractor
getch	src/Configure/tool.cpp	/^int getch() {$/;"	f
getche	src/Configure/tool.cpp	/^int getche() {$/;"	f
getflag	src/Feature/Gaussian.cpp	/^int Gaussian::getflag(){return flag;}$/;"	f	class:Gaussian
getm	src/Feature/Gaussian.h	/^	double getm(int i){return mean[i];};$/;"	f	class:Gaussian
getv	src/Feature/Gaussian.h	/^	double getv(int i){return cvar[i];};$/;"	f	class:Gaussian
graph	src/Feature/HMMSeqRecognition.h	/^        ParseGraph graph;$/;"	m	class:HMMSeqRecognition
hanning	src/Feature/FeatureExtractor.h	/^    static double hanning(int n, int M) {$/;"	f	class:FeatureExtractor
head	src/Feature/SeqModel.h	/^    int head; \/\/ state edge table$/;"	m	struct:SeqState
head	src/Feature/SeqModel.h	/^    int head;$/;"	m	struct:Dtw_Column_Link
head	src/Feature/WaveFeatureOP.h	/^    int head[2];$/;"	m	class:WaveFeatureOP
help	src/pro3_demo.cpp	/^const char * help = "\\$/;"	v
help	src/pro5_demo.cpp	/^const char * help = "\\$/;"	v
hmmFirstItr	src/Feature/HMMAutomatonSet.h	/^        virtual void hmmFirstItr() {$/;"	f	class:HMMAutomatonSet
hmmInitilize	src/Feature/HMMKmeanAutomaton.cpp	/^void HMMKMeanAutomaton::hmmInitilize() {$/;"	f	class:HMMKMeanAutomaton
hmmRecognition	src/Feature/HMMRecognition.cpp	/^std::string HMMRecognition::hmmRecognition(WaveFeatureOP & input) {$/;"	f	class:HMMRecognition
hmmSegTrain	src/Feature/HMMSeqRecognition.cpp	/^void HMMSeqRecognition::hmmSegTrain() {$/;"	f	class:HMMSeqRecognition
hmmSeqTrain	src/Feature/HMMSeqRecognition.cpp	/^void HMMSeqRecognition::hmmSeqTrain() {$/;"	f	class:HMMSeqRecognition
hmmSeqTrain	src/Feature/HMMSeqTrainer.cpp	/^void HMMSeqTrainer::hmmSeqTrain() {$/;"	f	class:HMMSeqTrainer
hmmState	src/Feature/SeqModel.h	/^    HMMState * hmmState;$/;"	m	struct:SeqState
hmmTrain	src/Feature/HMMKmeanAutomaton.cpp	/^void HMMKMeanAutomaton::hmmTrain() {$/;"	f	class:HMMKMeanAutomaton
hmmTrain	src/Feature/HMMRecognition.cpp	/^SP_RESULT HMMRecognition::hmmTrain(HMMAutomaton::TRAIN_TYPE type) {$/;"	f	class:HMMRecognition
hmmTrain	src/Feature/HMMSoftAutomaton.cpp	/^void HMMSoftAutomaton::hmmTrain() {$/;"	f	class:HMMSoftAutomaton
hmmTrainTask	src/Feature/HMMAutomatonSet.cpp	/^void HMMAutomatonSet::hmmTrainTask(void *in) {$/;"	f	class:HMMAutomatonSet
hmmTryLoad	src/Feature/HMMRecognition.cpp	/^SP_RESULT HMMRecognition::hmmTryLoad(char *templateDir) {$/;"	f	class:HMMRecognition
hz2bark	src/Matlab/rastamat/fft2barkmx.m	/^function z = hz2bark(f)$/;"	f
hz2bark	src/Matlab/rastamat/hz2bark.m	/^function z= hz2bark(f)$/;"	f
hz2mel	src/Feature/FeatureExtractor.h	/^    static double hz2mel(double frequency) {$/;"	f	class:FeatureExtractor
hz2mel	src/Matlab/rastamat/fft2melmx.m	/^function z = hz2mel(f,htk)$/;"	f
hz2mel	src/Matlab/rastamat/hz2mel.m	/^function z = hz2mel(f,htk)$/;"	f
hz2melFunc	src/Feature/FeatureExtractor.h	/^    double (*hz2melFunc)(double);$/;"	m	class:FeatureExtractor
idx	src/ThreadPool/ThreadPool.h	/^        int idx;$/;"	m	class:ThreadPool
in	src/Capture/Capture.h	/^    PaStreamParameters in;$/;"	m	class:Capture
in	src/ThreadPool/ThreadPool.h	/^    void *in;$/;"	m	struct:sp_task
inAlias	src/Configure/SerialFiles.cpp	/^const char * SerialFiles::inAlias(char * in) {$/;"	f	class:SerialFiles
increament	src/ThreadPool/ThreadPool.h	/^        void increament() {$/;"	f	class:ThreadPool
index	src/EditDistance/app.h	/^    int index;$/;"	m	struct:cmp_task_info
index	src/LexTree/app.h	/^    int index;$/;"	m	struct:cmp_task_info
info	src/EditDistance/conf.h	/^	static int info;$/;"	m	class:Conf
info	src/pro3_demo.cpp	/^int Conf::info = 0;$/;"	m	class:Conf	file:
info_arch	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_arch	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_compiler	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_compiler	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_platform	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_platform	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_simulate	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate_version	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	/^char const info_simulate_version[] = {$/;"	v
info_simulate_version	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_simulate_version[] = {$/;"	v
info_version	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	/^char const info_version[] = {$/;"	v
info_version	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v
init	src/Capture/Capture.cpp	/^bool Capture::init(RawData * data,bool input){$/;"	f	class:Capture
init	src/LexTree/spellcheck.h	/^	void init(LexTree * tree,int beam){$/;"	f	class:Link
init	src/LexTree/spellcheck.h	/^	void init(int size){$/;"	f	struct:Path
initIterate	src/Feature/HMMSoftAutomaton.cpp	/^void HMMSoftAutomaton::initIterate() {$/;"	f	class:HMMSoftAutomaton
initLink	src/LexTree/spellcheck.cpp	/^Link * SpellChecker::initLink(){$/;"	f	class:SpellChecker
initNOEmitStates	src/Feature/SeqModel.cpp	/^void SeqModel::initNOEmitStates( const ParseGraph & graph ) {$/;"	f	class:SeqModel
initRandGaussian	src/Feature/KMeanState.cpp	/^Gaussian * KMeanState::initRandGaussian(const vector<Feature*>& p)const$/;"	f	class:KMeanState
initTrain	src/Feature/SoftState.cpp	/^void SoftState::initTrain(int gaussianNum) {$/;"	f	class:SoftState
init_PA	src/Capture/Capture.cpp	/^bool Capture::init_PA(){$/;"	f	class:Capture
init_callback	src/Capture/AutoCapture.cpp	/^bool AutoCapture::init_callback(RawData * data,bool input){$/;"	f	class:AutoCapture
init_callback	src/Capture/Capture.cpp	/^bool Capture::init_callback(RawData * data,bool input){$/;"	f	class:Capture
init_stream	src/Capture/Capture.cpp	/^bool Capture::init_stream(bool input){$/;"	f	class:Capture
inital	src/Feature/FeatureExtractor.h	/^    void inital(){$/;"	f	class:FeatureExtractor
inputDirName	src/hmm_demo.cpp	/^char inputDirName[256] = INPUTS_DIR;$/;"	v
inputDirName	src/pro4_demo_1.cpp	/^char inputDirName[256] = INPUTS_DIR;$/;"	v
inputFeature	src/Feature/WaveFeatureOP.h	/^    std::vector<Feature>* inputFeature;$/;"	m	class:WaveFeatureOP
inputFileName	src/hmm_demo.cpp	/^char inputFileName[1000] = "";$/;"	v
inputFileName	src/pro4_demo_1.cpp	/^char inputFileName[1000] = "";$/;"	v
inputFileName	src/pro6_demo.cpp	/^char inputFileName[100] = "";$/;"	v
inputFileName	src/rawdtw.cpp	/^char inputFileName[1000] = "";$/;"	v
inputJob	src/EditDistance/app.cpp	/^bool APP::inputJob(){$/;"	f	class:APP
inputJob	src/LexTree/app.cpp	/^bool APP::inputJob(){$/;"	f	class:APP
ins	src/EditDistance/path.h	/^	int ins;$/;"	m	struct:Count
invaudspec	src/Matlab/rastamat/invaudspec.m	/^function [spec,wts,iwts] = invaudspec(aspectrum, sr, nfft, fbtype, minfreq, maxfreq, sumpower, bwidth)$/;"	f
invmelfcc	src/Matlab/rastamat/invmelfcc.m	/^function [x,aspc,spec] = invmelfcc(cep, sr, varargin)$/;"	f
invpostaud	src/Matlab/rastamat/invpostaud.m	/^function [x,eql] = invpostaud(y,fmax,fbtype,broaden)$/;"	f
invpowspec	src/Matlab/rastamat/invpowspec.m	/^function x = invpowspec(y, sr, wintime, steptime, excit)$/;"	f
isBigChange	src/Feature/HMMAutomaton.h	/^    bool isBigChange(double totalChangeCost) {$/;"	f	class:HMMAutomaton
isCapture	src/pro2_demo.cpp	/^bool isCapture;$/;"	v
isCapture	src/pro4_demo_1.cpp	/^bool isCapture;$/;"	v
isEmit	src/Feature/SeqModel.h	/^        bool isEmit( int stateID ) {$/;"	f	class:SeqModel
isLeaf	src/LexTree/LexTree.h	/^	bool isLeaf(){$/;"	f	class:Node
isWavFile	src/Configure/SerialFiles.h	/^        static bool isWavFile(char *fileName) {$/;"	f	class:SerialFiles
is_leaf	src/LexTree/LexTree.h	/^	bool is_leaf;$/;"	m	class:Node
ispecgram	src/Matlab/rastamat/ispecgram.m	/^function x = ispecgram(d, ftsize, sr, win, nov)$/;"	f
items	src/EditDistance/tmp/container.h	/^	vector<T> items;$/;"	m	class:Container
iterateTrain	src/Feature/HMMKMeanAutomaton.h	/^        bool iterateTrain() {$/;"	f	class:HMMKMeanAutomaton
iterateTrain	src/Feature/HMMSoftAutomaton.cpp	/^bool HMMSoftAutomaton::iterateTrain() {$/;"	f	class:HMMSoftAutomaton
iterator	src/Feature/WaveFeatureOPSet.h	/^                iterator(dataSetType *dataSetPtr, dataSetType::iterator Itr, int idx, int maxInstancePer = MAX_TEMPLATES_PER_WORD) : dataSet(dataSetPtr), I(Itr), vecIdx(idx), maxTemplatesPerWord(maxInstancePer) {}$/;"	f	class:WaveFeatureOPSet::iterator
iterator	src/Feature/WaveFeatureOPSet.h	/^                iterator(int maxInstancePer = MAX_TEMPLATES_PER_WORD) : dataSet(NULL), vecIdx(-1), maxTemplatesPerWord(maxInstancePer) { }$/;"	f	class:WaveFeatureOPSet::iterator
iterator	src/Feature/WaveFeatureOPSet.h	/^        class iterator {$/;"	c	class:WaveFeatureOPSet
lastUpdate	src/Feature/SeqModel.h	/^    int lastUpdate;$/;"	m	struct:Dtw_Column_Node
lastUpdate	src/Feature/WaveFeatureOP.h	/^    std::vector<int> lastUpdate;$/;"	m	class:WaveFeatureOP
lastUpdate	src/LexTree/spellcheck.h	/^    int lastUpdate;$/;"	m	struct:LinkNode
leafForwardIdx	src/Feature/SeqModel.h	/^    int leafForwardIdx; \/\/ forward to none emitted state$/;"	m	struct:SeqState
len	src/EditDistance/path.h	/^    int len;$/;"	m	struct:Path
len	src/EditDistance/tmp/container.h	/^	int len()const{return items.size();}$/;"	f	class:Container
level	src/Analysis/AEPAnalysis.h	/^    vector<double> level;$/;"	m	class:AEPAnalysis
lifter	src/Matlab/rastamat/lifter.m	/^function y = lifter(x, lift, invs)$/;"	f
list	src/LexTree/spellcheck.h	/^    Link list[2];$/;"	m	class:SpellChecker
load	src/Feature/DummyState.h	/^        void load(std::stringstream &in, int gaussNum) {$/;"	f	class:DummyState
load	src/Feature/Gaussian.cpp	/^void Gaussian::load(std::stringstream &in) {$/;"	f	class:Gaussian
load	src/Feature/HMMAutomatonSet.cpp	/^void HMMAutomatonSet::load(std::ifstream &in) {$/;"	f	class:HMMAutomatonSet
load	src/Feature/HMMKMeanAutomaton.h	/^        void load(std::stringstream &in) {$/;"	f	class:HMMKMeanAutomaton
load	src/Feature/HMMSoftAutomaton.h	/^        void load(std::stringstream &in) {$/;"	f	class:HMMSoftAutomaton
load	src/Feature/KMeanState.cpp	/^void KMeanState::load(std::stringstream &in, int gaussNum) {$/;"	f	class:KMeanState
load	src/Feature/NoEmitState.h	/^        void load(std::stringstream &in, int gaussNum) {}$/;"	f	class:NoEmitState
load	src/Feature/SoftState.cpp	/^void SoftState::load(std::stringstream &in, int gaussNum) {$/;"	f	class:SoftState
loadGraph	src/Feature/HMMSeqRecognition.cpp	/^void HMMSeqRecognition::loadGraph(const char *filename) {$/;"	f	class:HMMSeqRecognition
loadHMMModel	src/Feature/HMMRecognition.cpp	/^bool HMMRecognition::loadHMMModel() {$/;"	f	class:HMMRecognition
loadMfccFromMfccFile	src/Feature/WaveFeatureOPSet.h	/^    bool loadMfccFromMfccFile(char * dir, char * wavFileName, char * word) {$/;"	f	class:WaveFeatureOPSet
loadMfccs	src/Feature/WaveFeatureOPSet.cpp	/^SP_RESULT WaveFeatureOPSet::loadMfccs(char *templateDir, WaveFeatureOP::LOAD_TYPE loadType) {$/;"	f	class:WaveFeatureOPSet
loadMfccs	src/Feature/WaveFeatureOPSet.cpp	/^SP_RESULT WaveFeatureOPSet::loadMfccs(char *templateDir, char *fileName, WaveFeatureOP::LOAD_TYPE loadType) {$/;"	f	class:WaveFeatureOPSet
loadSpecStateNum	src/Feature/HMMAutomatonSet.cpp	/^void HMMAutomatonSet::loadSpecStateNum() {$/;"	f	class:HMMAutomatonSet
loadTemplates	src/Feature/HMMRecognition.cpp	/^SP_RESULT HMMRecognition::loadTemplates(char *templateDir, WaveFeatureOP::LOAD_TYPE loadType) {$/;"	f	class:HMMRecognition
loadTemplates	src/Feature/WordDtwRecognition.cpp	/^SP_RESULT WordDtwRecognition::loadTemplates(char *templateDir) {$/;"	f	class:WordDtwRecognition
loadWav	src/data/RawDataFile.cpp	/^bool RawData::loadWav(const char * file_name){$/;"	f	class:RawData
load_calc	src/test/test.cpp	/^SP_RESULT load_calc(const char *load_file_name,$/;"	f
load_wav_file	src/Capture/Capture.h	/^    static SP_RESULT load_wav_file(const char * const file_name, RawData &data, bool playback = false) {$/;"	f	class:Capture
load_wav_file	src/test/test.cpp	/^SP_RESULT load_wav_file(const char *file_name, RawData &data) {$/;"	f
logInsideDist	src/Feature/mathtool.cpp	/^double logInsideDist(double a, double b) {$/;"	f
logInsideSum	src/Feature/mathtool.cpp	/^double logInsideSum(double a, double b) {$/;"	f
lpc2cep	src/Matlab/rastamat/lpc2cep.m	/^function features = lpc2cep(a,nout)$/;"	f
lpc2spec	src/Matlab/rastamat/lpc2spec.m	/^function [features,F,M] = lpc2spec(lpcas, nout)$/;"	f
main	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	/^int main(int argc, char* argv[])$/;"	f
main	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	f
main	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f
main	src/hmm_demo.cpp	/^int main(int argc, char **argv) {$/;"	f
main	src/main.cpp	/^int main()$/;"	f
main	src/pro2_demo.cpp	/^int main(int argc, char **argv) {$/;"	f
main	src/pro3_demo.cpp	/^int main(int argc,char ** argv)$/;"	f
main	src/pro4_demo_1.cpp	/^int main(int argc, char **argv) {$/;"	f
main	src/pro5_demo.cpp	/^int main(int argc,char ** argv)$/;"	f
main	src/pro6_demo.cpp	/^int main(int argc, char **argv) {$/;"	f
main	src/rawdtw.cpp	/^int main(int argc, char **argv) {$/;"	f
main	src/recorder.cpp	/^int main(int argc, char **argv) {$/;"	f
matchRes	src/Feature/SeqModel.h	/^        std::vector< std::string >  matchRes;$/;"	m	class:SeqModel
matrix_file_read	src/Matlab/matrix_file_read.m	/^function [y] = matrix_file_read(filename)$/;"	f
maxInstancePer	src/pro4_demo_1.cpp	/^int maxInstancePer = MAX_TEMPLATES_PER_WORD;$/;"	v
maxProbability	src/Feature/SoftState.h	/^        double maxProbability;$/;"	m	class:SoftState
maxSizeBit	src/Configure/SerialFiles.cpp	/^const int SerialFiles::maxSizeBit = 13;$/;"	m	class:SerialFiles	file:
maxSizeBit	src/Configure/SerialFiles.h	/^        const static int maxSizeBit;$/;"	m	class:SerialFiles
maxTemplatesPerWord	src/Feature/WaveFeatureOPSet.h	/^                int maxTemplatesPerWord;$/;"	m	class:WaveFeatureOPSet::iterator
mean	src/Feature/Gaussian.h	/^	double*  mean;$/;"	m	class:Gaussian
mel2dct	src/Feature/FeatureExtractor.cpp	/^SP_RESULT FeatureExtractor::mel2dct(Feature & feature, std::vector<double> melLog, int cepsNum) {$/;"	f	class:FeatureExtractor
mel2hz	src/Feature/FeatureExtractor.h	/^    static double mel2hz(double hz) {$/;"	f	class:FeatureExtractor
mel2hz	src/Matlab/rastamat/fft2melmx.m	/^function f = mel2hz(z, htk)$/;"	f
mel2hz	src/Matlab/rastamat/mel2hz.m	/^function f = mel2hz(z, htk)$/;"	f
mel2hzFunc	src/Feature/FeatureExtractor.h	/^    double (*mel2hzFunc)(double);$/;"	m	class:FeatureExtractor
melCepstrum	src/Feature/FeatureExtractor.cpp	/^SP_RESULT FeatureExtractor::melCepstrum(std::vector<Feature> &cepstrums, \\$/;"	f	class:FeatureExtractor
melLog	src/Feature/FeatureExtractor.h	/^        std::vector<double> *melLog;$/;"	m	struct:FeatureExtractor::mul_task_info
melfcc	src/Matlab/rastamat/melfcc.m	/^function [cepstra,aspectrum,pspectrum] = melfcc(samples, sr, varargin)$/;"	f
melfcc_demo	src/Matlab/rastamat/melfcc_demo.m	/^function [cepstra,aspectrum,pspectrum] = melfcc_demo(filename, varargin)$/;"	f
min	src/EditDistance/calcDist.h	/^int min(int a,int b,int c){$/;"	f
minuLogP	src/Feature/Gaussian.cpp	/^double Gaussian::minuLogP(Feature* f){$/;"	f	class:Gaussian
mixedWavs	src/Feature/HMMAutomatonSet.h	/^        std::vector< WaveFeatureOP * > mixedWavs;$/;"	m	class:HMMAutomatonSet
mode	src/EditDistance/app.h	/^    int mode;$/;"	m	class:APP
mode	src/LexTree/app.h	/^    int mode;$/;"	m	class:APP
model	src/Feature/HMMSeqTrainer.h	/^    SeqModel* model;$/;"	m	struct:SeqWav
mulTask	src/Feature/FeatureExtractor.cpp	/^void FeatureExtractor::mulTask(void *in) {$/;"	f	class:FeatureExtractor
mul_task_info	src/Feature/FeatureExtractor.h	/^    struct mul_task_info {$/;"	s	class:FeatureExtractor
next	src/Feature/SeqModel.h	/^    int next;$/;"	m	struct:Dtw_Column_Node
next	src/Feature/SeqModel.h	/^    int next;$/;"	m	struct:SeqEdge
next	src/LexTree/spellcheck.h	/^	int next;$/;"	m	struct:LinkNode
nextWord	src/Feature/WaveFeatureOPSet.h	/^                const iterator & nextWord() {$/;"	f	class:WaveFeatureOPSet::iterator
nfft	src/Feature/FeatureExtractor.h	/^        int nfft;$/;"	m	struct:FeatureExtractor::padding_task_info
nid	src/LexTree/LexTree.h	/^	int nid;$/;"	m	class:Node
noEmitHead	src/Feature/SeqModel.h	/^    int noEmitHead; \/\/non state edge table$/;"	m	struct:SeqState
noUse	src/readwave/readwave.h	/^	unsigned int noUse;$/;"	m	struct:WavFileHead
nodeCost	src/Feature/DummyState.h	/^        double nodeCost(Feature *inputFeature) {$/;"	f	class:DummyState
nodeCost	src/Feature/KMeanState.cpp	/^double KMeanState::nodeCost(Feature *inputFeature) {$/;"	f	class:KMeanState
nodeCost	src/Feature/NoEmitState.h	/^        double nodeCost(Feature *inputFeature) { $/;"	f	class:NoEmitState
nodeCost	src/Feature/SoftState.cpp	/^double SoftState::nodeCost(Feature *inputFeature) {$/;"	f	class:SoftState
nodeCostTest	src/Feature/SoftState.cpp	/^double SoftState::nodeCostTest(Feature *inputFeature) {$/;"	f	class:SoftState
nodeCostTmp	src/Feature/HMMSoftAutomaton.h	/^        Matrix<double> nodeCostTmp;$/;"	m	class:HMMSoftAutomaton
nodes	src/Feature/SeqModel.h	/^    Dtw_Column_Node * nodes;$/;"	m	struct:Dtw_Column_Link
nodes	src/LexTree/LexTree.h	/^	std::vector<Node *> nodes;$/;"	m	class:LexTree
nonEmitEdges	src/Feature/SeqModel.h	/^        std::vector<SeqEdge>  nonEmitEdges;$/;"	m	class:SeqModel
normalization	src/Feature/FeatureExtractor.cpp	/^SP_RESULT FeatureExtractor::normalization(std::vector<Feature> &normalMels, const std::vector<Feature> & melFes) {$/;"	f	class:FeatureExtractor
now_min_index	src/LexTree/spellcheck.h	/^	int now_min_index;$/;"	m	class:Link
now_min_val	src/LexTree/spellcheck.h	/^	int now_min_val;$/;"	m	class:Link
one	src/LexTree/spellcheck.h	/^	bool one;$/;"	m	class:SpellChecker
operator !=	src/Feature/WaveFeatureOPSet.h	/^                bool operator !=(const iterator & b) {$/;"	f	class:WaveFeatureOPSet::iterator
operator *	src/Feature/Feature.h	/^    Feature operator * (const Feature & T)const{$/;"	f	class:Feature
operator *	src/Feature/Feature.h	/^    Feature operator * (double c)const{$/;"	f	class:Feature
operator *	src/Feature/WaveFeatureOPSet.h	/^                WaveFeatureOP * operator *() {$/;"	f	class:WaveFeatureOPSet::iterator
operator +	src/Feature/Feature.h	/^    Feature operator + (const Feature & T)const{$/;"	f	class:Feature
operator ++	src/Feature/WaveFeatureOPSet.h	/^                const iterator & operator ++() {$/;"	f	class:WaveFeatureOPSet::iterator
operator ++	src/Feature/WaveFeatureOPSet.h	/^                const iterator & operator ++(int) {$/;"	f	class:WaveFeatureOPSet::iterator
operator -	src/Feature/Feature.cpp	/^double Feature::operator -(const Feature & T) {$/;"	f	class:Feature
operator <	src/EditDistance/tmp/container.h	/^	friend bool operator <($/;"	f	class:Container
operator ==	src/EditDistance/tmp/container.h	/^	friend bool operator ==($/;"	f	class:Container
operator ==	src/Feature/WaveFeatureOP.cpp	/^bool WaveFeatureOP::operator==(const WaveFeatureOP & b) {$/;"	f	class:WaveFeatureOP
operator ==	src/Feature/WaveFeatureOPSet.h	/^                bool operator ==(const iterator & b) {$/;"	f	class:WaveFeatureOPSet::iterator
operator []	build/Graph/parseGraph.h	/^        const GraphEdge & operator [] (int idx) const {$/;"	f	class:ParseGraph
operator []	src/EditDistance/tmp/container.h	/^	const T& operator [](int t)const{return items[t];}$/;"	f	class:Container
operator []	src/Feature/Feature.h	/^    const double &operator[] (int inx) const {$/;"	f	class:Feature
operator []	src/Feature/Feature.h	/^    double &operator[] (int inx) {$/;"	f	class:Feature
operator []	src/Feature/WaveFeatureOP.cpp	/^Feature & WaveFeatureOP::operator[](int idx) {$/;"	f	class:WaveFeatureOP
operator []	src/Graph/parseGraph.h	/^        const GraphEdge & operator [] (int idx) const {$/;"	f	class:ParseGraph
operator []	src/LexTree/LexTree.h	/^	Node* operator [](int i){$/;"	f	class:LexTree
out	src/Capture/Capture.h	/^    PaStreamParameters out;$/;"	m	class:Capture
outAlias	src/Configure/SerialFiles.cpp	/^const char * SerialFiles::outAlias(char * out) {$/;"	f	class:SerialFiles
p	src/EditDistance/app.h	/^    Path * p;$/;"	m	struct:cmp_task_info
p	src/LexTree/LexTree.cpp	/^map<string,int> p;$/;"	v
p	src/LexTree/app.h	/^    Path * p;$/;"	m	struct:cmp_task_info
p2cost	src/Feature/mathtool.cpp	/^double p2cost(double p) {$/;"	f
paddingTask	src/Feature/FeatureExtractor.cpp	/^void FeatureExtractor::paddingTask(void *in) {$/;"	f	class:FeatureExtractor
padding_task_info	src/Feature/FeatureExtractor.h	/^    struct padding_task_info {$/;"	s	class:FeatureExtractor
parseGraph	build/Graph/parseGraph.cpp	/^void ParseGraph::parseGraph(const char * filename) {$/;"	f	class:ParseGraph
parseGraph	src/Graph/parseGraph.cpp	/^void ParseGraph::parseGraph(const char * filename) {$/;"	f	class:ParseGraph
parseSeqStr	build/Graph/parseGraph.cpp	/^void ParseGraph::parseSeqStr(const std::string & seqStr) {$/;"	f	class:ParseGraph
parseSeqStr	src/Graph/parseGraph.cpp	/^void ParseGraph::parseSeqStr(const std::string & seqStr) {$/;"	f	class:ParseGraph
parseSerialFileName	src/Configure/SerialFiles.cpp	/^void SerialFiles::parseSerialFileName(const char * const fileName, int &seqNum, int prefixNum, ...) {$/;"	f	class:SerialFiles
patestCallback	src/Capture/AutoCapture.cpp	/^static int patestCallback( const void *inputBuffer, void *outputBuffer,$/;"	f	file:
path	src/Feature/HMMAutomaton.h	/^    Matrix<int> path;$/;"	m	class:HMMAutomaton
path	src/Feature/WaveFeatureOP.h	/^    std::vector<int> path;$/;"	m	class:WaveFeatureOP
path	src/LexTree/spellcheck.h	/^	Path path;$/;"	m	class:SpellChecker
path	src/LexTree/spellcheck.h	/^	std::map<int,int> path;$/;"	m	struct:Path
path_type	src/Feature/SeqModel.h	/^        SEQ_DTW_PATH_TYPE path_type;$/;"	m	class:SeqModel
paths	src/EditDistance/app.h	/^    vector<Path> paths;	$/;"	m	class:APP
paths	src/LexTree/app.h	/^    vector<Path> paths;	$/;"	m	class:APP
play	src/Capture/Capture.cpp	/^bool Capture::play(RawData * data){$/;"	f	class:Capture
playAction	src/Capture/Capture.cpp	/^bool Capture::playAction(RawData * data){$/;"	f	class:Capture
playback	src/recorder.cpp	/^bool playback = false;$/;"	v
pnt	src/LexTree/LexTree.h	/^	Node * pnt;$/;"	m	class:Node
points	src/Feature/KMeanState.h	/^		std::vector<Feature*> points; $/;"	m	class:KMeanState
points	src/Feature/KMeanState.h	/^	std::vector<Feature*> points;$/;"	m	struct:Cluster
postaud	src/Matlab/rastamat/postaud.m	/^function [y,eql] = postaud(x,fmax,fbtype,broaden)$/;"	f
powSpec	src/Feature/FeatureExtractor.h	/^        Matrix<double> * powSpec;$/;"	m	struct:FeatureExtractor::mul_task_info
powSpectrum	src/Feature/FeatureExtractor.cpp	/^SP_RESULT FeatureExtractor::powSpectrum(Matrix<double> &powSpec, \\$/;"	f	class:FeatureExtractor
powWinSpec	src/Feature/FeatureExtractor.h	/^        std::vector<double> * powWinSpec;$/;"	m	struct:FeatureExtractor::fft_task_info
powspec	src/Matlab/rastamat/powspec.m	/^function [y,e] = powspec(x, sr, wintime, steptime, dither)$/;"	f
preEmph	src/Feature/FeatureExtractor.cpp	/^SP_RESULT FeatureExtractor::preEmph(\/* out *\/std::vector<double> &outs, \\$/;"	f	class:FeatureExtractor
preIdx	src/Feature/SeqModel.h	/^    int preIdx; \/\/ used by backPtr search$/;"	m	struct:Dtw_Column_Node
prePtr	src/Feature/SeqModel.h	/^    int prePtr;$/;"	m	struct:BackPtr
preparePathRecord	src/Feature/SeqModel.cpp	/^void SeqModel::preparePathRecord(WaveFeatureOP & wav) {$/;"	f	class:SeqModel
print	src/EditDistance/app.cpp	/^void APP::print(const vector<int>& index,const vector<string>& v,bool line)const{$/;"	f	class:APP
print	src/EditDistance/app.cpp	/^void APP::print(const vector<string>& v,bool line)const{$/;"	f	class:APP
print	src/EditDistance/path.h	/^	void print(){$/;"	f	struct:Count
print	src/EditDistance/path.h	/^    void print(){$/;"	f	struct:Path
print	src/Feature/Gaussian.cpp	/^void Gaussian::print(){$/;"	f	class:Gaussian
print	src/LexTree/app.cpp	/^void APP::print(const vector<int>& index,const vector<string>& v,bool line)const{$/;"	f	class:APP
print	src/LexTree/app.cpp	/^void APP::print(const vector<string>& v,bool line)const{$/;"	f	class:APP
print	src/LexTree/spellcheck.h	/^	void print(){$/;"	f	class:Link
print	src/LexTree/spellcheck.h	/^	void print(int x,int y){$/;"	f	struct:Path
printAns	src/LexTree/spellcheck.h	/^	void printAns(){$/;"	f	class:SpellChecker
printInf	src/Analysis/AEPAnalysis.cpp	/^int AEPAnalysis::printInf(int from,int end){$/;"	f	class:AEPAnalysis
printInf	src/Analysis/EPAnalysis.cpp	/^int EPAnalysis::printInf(int from,int end){$/;"	f	class:EPAnalysis
printInfo	src/EditDistance/app.cpp	/^void APP::printInfo(){$/;"	f	class:APP
printInfo	src/LexTree/app.cpp	/^void APP::printInfo(){$/;"	f	class:APP
printMatrix	src/EditDistance/calcDist.h	/^static void printMatrix(const char * a,const char * b,const Path* path){$/;"	f
printPath	src/EditDistance/calcDist.h	/^static void printPath(const T& a,const T& b,$/;"	f
printw	src/Feature/KMeanState.cpp	/^void KMeanState::printw(){	$/;"	f	class:KMeanState
probabilities	src/Feature/SoftState.h	/^        Matrix<double> probabilities;$/;"	m	class:SoftState
probability	build/Graph/parseGraph.h	/^    double probability;$/;"	m	struct:GraphEdge
probability	src/Graph/parseGraph.h	/^    double probability;$/;"	m	struct:GraphEdge
processThread	src/ThreadPool/ThreadPool.cpp	/^void *ThreadPool::processThread(void *param) {$/;"	f	class:ThreadPool
process_options	src/Matlab/rastamat/process_options.m	/^function [varargout] = process_options(args, varargin)$/;"	f
pushNewModel	src/Feature/HMMSeqTrainer.cpp	/^void HMMSeqTrainer::pushNewModel(const std::string &seqStr,std::map<std::string, HMMAutomaton *> &automatons, std::vector<SeqModel> &models) {$/;"	f	class:HMMSeqTrainer
push_back	src/Feature/Feature.cpp	/^void Feature::push_back(double d) {$/;"	f	class:Feature
qnxnto	build/CMakeFiles/3.0.1/CompilerIdC/CMakeCCompilerId.c	/^char const* qnxnto = "INFO" ":" "qnxnto";$/;"	v
qnxnto	build/CMakeFiles/3.0.1/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* qnxnto = "INFO" ":" "qnxnto";$/;"	v
rastafilt	src/Matlab/rastamat/rastafilt.m	/^function y = rastafilt(x)$/;"	f
rastaplp	src/Matlab/rastamat/rastaplp.m	/^function [cepstra, spectra, pspectrum, lpcas, F, M] = rastaplp(samples, sr, dorasta, modelorder)$/;"	f
rawData	src/Feature/Feature.h	/^    double *rawData() {$/;"	f	class:Feature
rawDtw	src/rawdtw.cpp	/^void rawDtw(vector<Feature> a, vector<Feature> b) {$/;"	f
reCalcAllData	src/Analysis/EPAnalysis.cpp	/^void EPAnalysis::reCalcAllData(){$/;"	f	class:EPAnalysis
reGenerateAutomaton	src/Feature/HMMAutomatonSet.cpp	/^void HMMAutomatonSet::reGenerateAutomaton() {$/;"	f	class:HMMAutomatonSet
readFile	src/EditDistance/app.cpp	/^void APP::readFile(){$/;"	f	class:APP
readFile	src/LexTree/app.cpp	/^void APP::readFile(){$/;"	f	class:APP
readFromKeyBoard	src/EditDistance/tmp/containerset.h	/^	virtual bool readFromKeyBoard(){$/;"	f	class:ContainerSet
readhtk	src/Matlab/rastamat/readhtk.m	/^function [d,fp,dt,tc,t]=readhtk(file)$/;"	f
readline	src/EditDistance/app.cpp	/^bool readline(vector<string>& v){$/;"	f
readline	src/LexTree/app.cpp	/^bool readline(vector<string>& v){$/;"	f
recognition	src/Feature/HMMAutomatonSet.cpp	/^std::string HMMAutomatonSet::recognition(WaveFeatureOP & input) {$/;"	f	class:HMMAutomatonSet
recognition	src/Feature/HMMSeqRecognition.cpp	/^void HMMSeqRecognition::recognition(WaveFeatureOP & input, std::vector<std::string> & res) {$/;"	f	class:HMMSeqRecognition
recognition	src/Feature/SeqModel.cpp	/^void SeqModel::recognition(WaveFeatureOP & input, std::vector<std::string> & res, SEQ_DTW_PATH_TYPE path_type) {$/;"	f	class:SeqModel
recordPath	src/Feature/WaveFeatureOP.h	/^    void recordPath(int bestIdx) {$/;"	f	class:WaveFeatureOP
refresh	src/EditDistance/calcDist.h	/^static int refresh(int * pos,int * diff,int& cnt,int p,int val){$/;"	f
refreshEdge	src/Feature/SeqModel.cpp	/^void SeqModel::refreshEdge(const GraphEdge & simpleEdge, std::map< std::string, HMMAutomaton *> & automatons, int &edgeCnt, int &stateCnt, int &nonEmitEdgeCnt) {$/;"	f	class:SeqModel
refreshEdge	src/Feature/SeqModel.cpp	/^void SeqModel::refreshEdge(std::vector<SeqEdge> &edges, int from, int to, double cost, int &edgeCnt) {$/;"	f	class:SeqModel
refreshEdges	src/Feature/SeqModel.cpp	/^void SeqModel::refreshEdges( const ParseGraph & graph, std::map< std::string, HMMAutomaton *> & automatons) {$/;"	f	class:SeqModel
refreshLink	src/LexTree/spellcheck.cpp	/^void SpellChecker::refreshLink(char next_c,$/;"	f	class:SpellChecker
refreshNode	src/Feature/SeqModel.cpp	/^int SeqModel::refreshNode( const HMMAutomaton & automaton, int stateID, int &stateCnt, const std::string &word) {$/;"	f	class:SeqModel
reportMatlab	src/pro2_demo.cpp	/^void reportMatlab(FeatureExtractor &extractor) {$/;"	f
resize	src/Feature/Feature.h	/^    void resize(int s) {$/;"	f	class:Feature
result	src/EditDistance/app.h	/^    vector<int> * result;$/;"	m	struct:cmp_task_info
result	src/LexTree/app.h	/^    vector<int> * result;$/;"	m	struct:cmp_task_info
riffRead	src/Matlab/riffRead.m	/^function [d, fs] = riffRead(filename)$/;"	f
rollColumnCost	src/Feature/HMMAutomaton.h	/^    std::vector<double> rollColumnCost[2];$/;"	m	class:HMMAutomaton
rollDtw	src/Feature/HMMAutomaton.h	/^    std::pair<int, double> rollDtw(WaveFeatureOP & features, dtwType type) {$/;"	f	class:HMMAutomaton
rollDtwInit	src/Feature/HMMAutomaton.h	/^    void rollDtwInit(WaveFeatureOP &features, dtwType type) {$/;"	f	class:HMMAutomaton
root	src/LexTree/LexTree.h	/^	Node * root;$/;"	m	class:LexTree
run	src/EditDistance/app.cpp	/^bool APP::run(){$/;"	f	class:APP
run	src/LexTree/app.cpp	/^bool APP::run(){$/;"	f	class:APP
run	src/ThreadPool/ThreadPool.cpp	/^void ThreadPool::run() {$/;"	f	class:ThreadPool
run	src/pro3_demo.cpp	/^void run(){$/;"	f
run	src/pro5_demo.cpp	/^void run(){$/;"	f
runDemo11	src/pro4_demo_1.cpp	/^void runDemo11() {$/;"	f
runDemo11	src/rawdtw.cpp	/^void runDemo11() {$/;"	f
runDemoN1	src/pro4_demo_1.cpp	/^void runDemoN1() {$/;"	f
runDemoNN	src/pro4_demo_1.cpp	/^void runDemoNN() {$/;"	f
runN1	src/hmm_demo.cpp	/^void runN1() {$/;"	f
runNN	src/hmm_demo.cpp	/^void runNN() {$/;"	f
same	src/EditDistance/path.h	/^	int same;$/;"	m	struct:Count
sampleNum	src/Feature/Gaussian.h	/^	double sampleNum;$/;"	m	class:Gaussian
saveArray	src/Configure/tool.cpp	/^void saveArray(FILE* fid ,const char * data, int len){$/;"	f
saveArray	src/Configure/tool.cpp	/^void saveArray(FILE* fid ,const double * data, int len){$/;"	f
saveArray	src/Configure/tool.cpp	/^void saveArray(FILE* fid ,const int * data, int len){$/;"	f
saveGaussianModel	src/Feature/KMeanState.cpp	/^void KMeanState::saveGaussianModel()$/;"	f	class:KMeanState
saveMatlab	src/Analysis/EPAnalysis.cpp	/^bool EPAnalysis::saveMatlab(const char * file_name){$/;"	f	class:EPAnalysis
saveMfcc2MfccFile	src/Feature/WaveFeatureOPSet.h	/^    void saveMfcc2MfccFile(char * dir, char * wavFileName, const std::vector<Feature> & features) {$/;"	f	class:WaveFeatureOPSet
saveOtherData	src/Analysis/AEPAnalysis.cpp	/^void AEPAnalysis::saveOtherData(FILE * fid){$/;"	f	class:AEPAnalysis
saveOtherData	src/Analysis/EPAnalysis.h	/^    virtual void saveOtherData(FILE * fid){};$/;"	f	class:EPAnalysis
saveStrsToFile	src/EditDistance/stringtool.cpp	/^void saveStrsToFile(const char *FileName,const vector<int> ind,$/;"	f
saveWav	src/data/RawDataFile.cpp	/^bool RawData::saveWav(const char * file_name){$/;"	f	class:RawData
segTrain	src/Feature/HMMAutomatonSet.cpp	/^SP_RESULT HMMAutomatonSet::segTrain() {$/;"	f	class:HMMAutomatonSet
sentenceSp	src/EditDistance/app.cpp	/^const char * sentenceSp = wordSp;$/;"	v
sentenceSp	src/LexTree/app.cpp	/^const char * sentenceSp = wordSp;$/;"	v
seqModel	src/Feature/HMMSeqRecognition.h	/^        SeqModel seqModel;$/;"	m	class:HMMSeqRecognition
seqTrain	src/Feature/HMMAutomatonSet.cpp	/^SP_RESULT HMMAutomatonSet::seqTrain() {$/;"	f	class:HMMAutomatonSet
serialGenerator	src/recorder.cpp	/^SerialFiles serialGenerator;$/;"	v
setAlg	src/EditDistance/app.cpp	/^bool APP::setAlg(int t){$/;"	f	class:APP
setAlg	src/LexTree/app.cpp	/^bool APP::setAlg(int t){$/;"	f	class:APP
setBeam	src/Feature/HMMSeqRecognition.cpp	/^void HMMSeqRecognition::setBeam( double beam ) {$/;"	f	class:HMMSeqRecognition
setBeam	src/Feature/SeqModel.cpp	/^void SeqModel::setBeam(double thr) {$/;"	f	class:SeqModel
setBeam	src/LexTree/spellcheck.h	/^	void setBeam(int b){beam = b;}$/;"	f	class:SpellChecker
setCVar	src/Feature/Gaussian.cpp	/^void Gaussian::setCVar(double v){$/;"	f	class:Gaussian
setData	src/data/RawData.cpp	/^void RawData::setData(int index,SOUND_DATA d){$/;"	f	class:RawData
setDoRecordPath	src/Feature/WordDtwRecognition.cpp	/^void WordDtwRecognition::setDoRecordPath(bool doRecord) {$/;"	f	class:WordDtwRecognition
setFeatureType	src/Feature/Feature.cpp	/^Feature::FeatureType Feature::setFeatureType(Feature::FeatureType type) {$/;"	f	class:Feature
setFirstLink	src/LexTree/spellcheck.h	/^	void setFirstLink(){$/;"	f	class:Link
setFrameNum	src/data/RawData.cpp	/^bool RawData::setFrameNum(int f_num){$/;"	f	class:RawData
setGaussNum	src/Feature/HMMRecognition.h	/^        void setGaussNum(int gaussNum) {$/;"	f	class:HMMRecognition
setMaxInstancePerWord	src/Feature/WordDtwRecognition.cpp	/^void WordDtwRecognition::setMaxInstancePerWord(int maxInstancePer) {$/;"	f	class:WordDtwRecognition
setMaxLen	src/EditDistance/path.h	/^    void setMaxLen(int m){$/;"	f	struct:Path
setMean	src/Feature/Gaussian.cpp	/^void Gaussian::setMean(Feature * f){$/;"	f	class:Gaussian
setMode	src/EditDistance/app.cpp	/^bool APP::setMode(int t){$/;"	f	class:APP
setMode	src/LexTree/app.cpp	/^bool APP::setMode(int t){$/;"	f	class:APP
setNid	src/LexTree/LexTree.h	/^	void setNid(int nid){$/;"	f	class:Node
setPathType	src/Feature/SeqModel.h	/^        void setPathType(SEQ_DTW_PATH_TYPE path_type) {$/;"	f	class:SeqModel
setRandCVar	src/Feature/Gaussian.cpp	/^void Gaussian::setRandCVar(){$/;"	f	class:Gaussian
setSizeBit	src/Configure/SerialFiles.cpp	/^void SerialFiles::setSizeBit(int sizeBit) {$/;"	f	class:SerialFiles
setStateNum	src/Feature/HMMRecognition.h	/^        void setStateNum(int stateNum) {$/;"	f	class:HMMRecognition
setTrainTimes	src/Feature/HMMRecognition.h	/^        void setTrainTimes(int trainTimes) {$/;"	f	class:HMMRecognition
showInfo	src/LexTree/LexTree.cpp	/^void LexTree::showInfo(){$/;"	f	class:LexTree
showInfo	src/LexTree/spellcheck.h	/^	void showInfo(){$/;"	f	class:SpellChecker
sigma	src/Feature/SoftState.h	/^        double sigma[39];$/;"	m	class:SoftState
silentTime	src/Analysis/EPAnalysis.h	/^    int silentTime; \/\/ don't find how many block$/;"	m	class:EPAnalysis
size	build/Graph/parseGraph.h	/^        int size() const {$/;"	f	class:ParseGraph
size	src/EditDistance/calcDist.h	/^int size(const char * t){$/;"	f
size	src/EditDistance/calcDist.h	/^int size(const vector<T>& v){$/;"	f
size	src/Feature/Feature.h	/^    int size() const {$/;"	f	class:Feature
size	src/Feature/WaveFeatureOP.cpp	/^int WaveFeatureOP::size() {$/;"	f	class:WaveFeatureOP
size	src/Graph/parseGraph.h	/^        int size() const {$/;"	f	class:ParseGraph
size	src/LexTree/spellcheck.h	/^	int size;$/;"	m	class:Link
size	src/LexTree/spellcheck.h	/^	int size;$/;"	m	struct:Path
sizeBit	src/Configure/SerialFiles.h	/^        int sizeBit;$/;"	m	class:SerialFiles
smooth	src/Analysis/EPAnalysis.cpp	/^void EPAnalysis::smooth(){$/;"	f	class:EPAnalysis
solution	src/main.cpp	/^void solution(){$/;"	f
sons	src/LexTree/LexTree.h	/^	std::vector<Node *> sons;$/;"	m	class:Node
sp_task	src/ThreadPool/ThreadPool.h	/^struct sp_task {$/;"	s
spec2cep	src/Matlab/rastamat/spec2cep.m	/^function [cep,dctm] = spec2cep(spec, ncep, type)$/;"	f
specStateNums	src/Feature/HMMAutomatonSet.h	/^        std::map< std::string, int> specStateNums;$/;"	m	class:HMMAutomatonSet
speech	src/Analysis/EPAnalysis.h	/^    vector<char> speech;$/;"	m	class:EPAnalysis
sqr	src/Feature/Feature.h	/^    Feature sqr(){$/;"	f	class:Feature
stateID	src/Feature/SeqModel.h	/^    int stateID; \/\/ used for check if it is terminal state$/;"	m	struct:BackPtr
stateNum	src/Feature/HMMRecognition.h	/^        int stateNum;$/;"	m	class:HMMRecognition
states	src/Feature/HMMAutomaton.h	/^    std::vector<HMMState *> states;$/;"	m	class:HMMAutomaton
states	src/Feature/SeqModel.h	/^        std::vector<SeqState> states;$/;"	m	class:SeqModel
store	src/Feature/DummyState.h	/^        void store(std::stringstream &out) {$/;"	f	class:DummyState
store	src/Feature/Gaussian.cpp	/^void Gaussian::store(std::stringstream &out) {$/;"	f	class:Gaussian
store	src/Feature/HMMAutomaton.cpp	/^void HMMAutomaton::store(std::stringstream &out) {$/;"	f	class:HMMAutomaton
store	src/Feature/HMMAutomatonSet.cpp	/^void HMMAutomatonSet::store(std::ofstream &out) {$/;"	f	class:HMMAutomatonSet
store	src/Feature/KMeanState.cpp	/^void KMeanState::store(std::stringstream &out) {$/;"	f	class:KMeanState
store	src/Feature/NoEmitState.h	/^        void store(std::stringstream &out){}$/;"	f	class:NoEmitState
store	src/Feature/SoftState.cpp	/^void SoftState::store(std::stringstream &out) {$/;"	f	class:SoftState
storeFeas	src/pro2_demo.cpp	/^void storeFeas(const std::vector<Feature> & data, const char *filename) {$/;"	f
storeFeas	src/pro4_demo_1.cpp	/^void storeFeas(const std::vector<Feature> & data, const char *filename) {$/;"	f
storeHMMModel	src/Feature/HMMRecognition.cpp	/^void HMMRecognition::storeHMMModel() {$/;"	f	class:HMMRecognition
storeMatrix	src/pro2_demo.cpp	/^void storeMatrix(const Matrix<T> &data, const char *filename) {$/;"	f
storeVector	src/pro2_demo.cpp	/^void storeVector(const vector<T> &data, const char *filename) {$/;"	f
story	src/EditDistance/app.h	/^    vector<string> story;$/;"	m	class:APP
story	src/LexTree/app.h	/^    vector<string> story;$/;"	m	class:APP
storyIndex	src/EditDistance/app.h	/^    vector<int> storyIndex; \/\/index[i] = -1，则单词未出现过，否则与index[i]相同$/;"	m	class:APP
storyIndex	src/LexTree/app.h	/^    vector<int> storyIndex; \/\/index[i] = -1，则单词未出现过，否则与index[i]相同$/;"	m	class:APP
stream	src/Capture/Capture.h	/^    PaStream * stream;$/;"	m	class:Capture
stringFile	src/recorder.cpp	/^const char * stringFile(const char * a,const char * b,char *ab){$/;"	f
stringFile	src/test/test.cpp	/^const char * stringFile(const char * a,const char * b,char *ab){$/;"	f
sumCV	src/Feature/KMeanState.cpp	/^double KMeanState::sumCV()$/;"	f	class:KMeanState
synInit	src/Feature/WaveFeatureOP.cpp	/^void WaveFeatureOP::synInit(std::vector<Feature> *inputFeature) {$/;"	f	class:WaveFeatureOP
tasks	src/ThreadPool/ThreadPool.h	/^    std::vector<sp_task> tasks;$/;"	m	struct:thread_info
tempDir	src/pro6_demo.cpp	/^char tempDir[100] = ".\/combine";$/;"	v
templateDir	src/Feature/HMMRecognition.h	/^        string templateDir;$/;"	m	class:HMMRecognition
templateDirName	src/hmm_demo.cpp	/^char templateDirName[256] = TEMPLATES_DIR;$/;"	v
templateDirName	src/pro4_demo_1.cpp	/^char templateDirName[256] = TEMPLATES_DIR;$/;"	v
templateFileName	src/hmm_demo.cpp	/^char templateFileName[1000] = "";$/;"	v
templateFileName	src/pro4_demo_1.cpp	/^char templateFileName[1000] = "";$/;"	v
templateFileName	src/rawdtw.cpp	/^char templateFileName[1000] = "";$/;"	v
templates	src/Feature/HMMAutomaton.h	/^    std::vector<WaveFeatureOP> * templates;$/;"	m	class:HMMAutomaton
templates	src/Feature/HMMState.h	/^        std::vector<WaveFeatureOP> * templates;$/;"	m	class:HMMState
templates	src/Feature/WordDtwRecognition.h	/^        WaveFeatureOPSet templates;$/;"	m	class:WordDtwRecognition
test	src/pro5_demo.cpp	/^void test(){$/;"	f
threadNum	src/Feature/FeatureExtractor.h	/^    int threadNum;$/;"	m	class:FeatureExtractor
threadNum	src/ThreadPool/ThreadPool.h	/^        int threadNum;$/;"	m	class:ThreadPool
threadNum	src/hmm_demo.cpp	/^int  threadNum = DEFAULT_THREAD_NUM;$/;"	v
threadNum	src/pro2_demo.cpp	/^int  threadNum = DEFAULT_THREAD_NUM;$/;"	v
threadNum	src/pro4_demo_1.cpp	/^int  threadNum = DEFAULT_THREAD_NUM;$/;"	v
threadNum	src/pro6_demo.cpp	/^int threadNum = 4;$/;"	v
threadNum	src/rawdtw.cpp	/^int  threadNum = DEFAULT_THREAD_NUM;$/;"	v
threadTasks	src/ThreadPool/ThreadPool.h	/^        std::vector< thread_info > threadTasks;$/;"	m	class:ThreadPool
thread_info	src/ThreadPool/ThreadPool.h	/^struct thread_info {$/;"	s
thread_num	src/EditDistance/app.h	/^const int thread_num = 4;$/;"	v
thread_num	src/LexTree/app.h	/^const int thread_num = 4;$/;"	v
thread_num	src/ThreadPool/ThreadPool.cpp	/^int ThreadPool::thread_num = DEFAULT_THREAD_NUM;$/;"	m	class:ThreadPool	file:
thread_num	src/ThreadPool/ThreadPool.h	/^        static int thread_num;$/;"	m	class:ThreadPool
threshold	src/EditDistance/conf.h	/^    static int threshold;$/;"	m	class:Conf
threshold	src/pro3_demo.cpp	/^int Conf::threshold = 3;$/;"	m	class:Conf	file:
threshold	src/pro4_demo_1.cpp	/^double threshold = DEFAULT_BEAM_THRESHOLD;$/;"	v
threshold	src/rawdtw.cpp	/^double threshold;$/;"	v
tid	src/ThreadPool/ThreadPool.h	/^    pthread_t tid;$/;"	m	struct:thread_info
tmp_mean	src/Feature/Gaussian.h	/^	double* tmp_mean;$/;"	m	class:Gaussian
tmp_mean2	src/Feature/Gaussian.h	/^	double* tmp_mean2;$/;"	m	class:Gaussian
to	build/Graph/parseGraph.h	/^    int from, to;$/;"	m	struct:GraphEdge
to	src/Feature/SeqModel.h	/^    int to;$/;"	m	struct:SeqEdge
to	src/Graph/parseGraph.h	/^    int from, to;$/;"	m	struct:GraphEdge
totalProbability	src/Feature/SoftState.h	/^        double totalProbability;$/;"	m	class:SoftState
train	src/Feature/HMMAutomatonSet.cpp	/^SP_RESULT HMMAutomatonSet::train(HMMAutomaton::TRAIN_TYPE type) {$/;"	f	class:HMMAutomatonSet
trainModels	src/Feature/HMMSeqTrainer.h	/^        std::vector<SeqModel> trainModels;$/;"	m	class:HMMSeqTrainer
trainThreshold	src/Feature/WordDtwRecognition.h	/^        void trainThreshold() {$/;"	f	class:WordDtwRecognition
trainTimes	src/Feature/HMMRecognition.h	/^        int trainTimes;$/;"	m	class:HMMRecognition
trainWavs	src/Feature/HMMSeqTrainer.h	/^        std::vector<SeqWav> trainWavs;$/;"	m	class:HMMSeqTrainer
transferCost	src/Feature/HMMAutomaton.h	/^    Matrix<double> transferCost;$/;"	m	class:HMMAutomaton
tree	src/LexTree/spellcheck.h	/^	LexTree * tree;$/;"	m	class:Link
tree	src/LexTree/spellcheck.h	/^	LexTree tree;$/;"	m	class:SpellChecker
tryForwardToStar	src/Feature/SeqModel.cpp	/^void SeqModel::tryForwardToStar( Dtw_Column_Link *link, int columnIdx, int stateID, double preCost) {$/;"	f	class:SeqModel
tryUpdate	src/Feature/SeqModel.cpp	/^void SeqModel::tryUpdate(Dtw_Column_Link * link, int columnIdx, int preStateID, int stateID, double newCost) {$/;"	f	class:SeqModel
type	src/EditDistance/app.h	/^    int type;$/;"	m	struct:cmp_task_info
type	src/Feature/Feature.h	/^    FeatureType type;$/;"	m	class:Feature
type	src/LexTree/app.h	/^    int type;$/;"	m	struct:cmp_task_info
u	src/Feature/SoftState.h	/^        double u[39];$/;"	m	class:SoftState
update	src/EditDistance/calcDist.h	/^void update(Path * path,int * val,DIR * p,int a_l,int b_l,int ret, int w){$/;"	f
update	src/Feature/Gaussian.cpp	/^bool Gaussian::update(std::vector<double>& u,std::vector<double> & v)$/;"	f	class:Gaussian
updateDtwNode	src/Feature/WaveFeatureOP.h	/^    void updateDtwNode(int columnIdx, int rowIdx, double newPathDist) {$/;"	f	class:WaveFeatureOP
updateSegmentation	src/Feature/HMMKMeanAutomaton.h	/^        void updateSegmentation(int templateIdx, int bestFinalRowIdx) {$/;"	f	class:HMMKMeanAutomaton
updateTemplateNode	src/Feature/HMMSoftAutomaton.cpp	/^void HMMSoftAutomaton::updateTemplateNode(int templateIdx) {$/;"	f	class:HMMSoftAutomaton
updateTemplateTransfer	src/Feature/HMMSoftAutomaton.cpp	/^void HMMSoftAutomaton::updateTemplateTransfer(int templateIdx) {$/;"	f	class:HMMSoftAutomaton
updateTransfer	src/Feature/HMMKMeanAutomaton.h	/^        bool updateTransfer() {$/;"	f	class:HMMKMeanAutomaton
updateTransfer	src/Feature/HMMSoftAutomaton.cpp	/^bool HMMSoftAutomaton::updateTransfer() {$/;"	f	class:HMMSoftAutomaton
use	src/LexTree/spellcheck.h	/^	bool use ;$/;"	m	struct:Path
user	src/recorder.cpp	/^char user[100] = "anony";$/;"	v
userData	src/Capture/Capture.h	/^    void * userData;$/;"	m	class:Capture
val	src/EditDistance/path.h	/^    int * val;$/;"	m	struct:Path
val	src/LexTree/spellcheck.h	/^	LinkNode * val;$/;"	m	class:Link
val	src/LexTree/spellcheck.h	/^	int val;$/;"	m	struct:LinkNode
vecIdx	src/Feature/WaveFeatureOPSet.h	/^                int vecIdx;$/;"	m	class:WaveFeatureOPSet::iterator
vec_file_read	src/Matlab/vec_file_read.m	/^function [y] = vec_file_read(filename)$/;"	f
w	src/EditDistance/app.h	/^    const char * w;$/;"	m	struct:cmp_task_info
w	src/Feature/KMeanState.h	/^		std::vector<double> w;	$/;"	m	class:KMeanState
w	src/Feature/KMeanState.h	/^	double w;$/;"	m	struct:Cluster
w	src/LexTree/app.h	/^    const char * w;$/;"	m	struct:cmp_task_info
wav	src/Feature/HMMSeqTrainer.h	/^    WaveFeatureOP * wav;$/;"	m	struct:SeqWav
wavFileName	src/pro2_demo.cpp	/^char wavFileName[1024] = "\\0";$/;"	v
weight	src/Feature/SoftState.h	/^        std::vector<double> weight;$/;"	m	class:SoftState
winFunc	src/Feature/FeatureExtractor.h	/^    double (*winFunc)(int, int);$/;"	m	class:FeatureExtractor
window	src/Feature/FeatureExtractor.h	/^        std::vector<double> * window;$/;"	m	struct:FeatureExtractor::fft_task_info
window	src/Feature/FeatureExtractor.h	/^        std::vector<double> * window;$/;"	m	struct:FeatureExtractor::padding_task_info
windowFFT	src/Feature/FeatureExtractor.cpp	/^std::vector<double> & FeatureExtractor::windowFFT(std::vector<double> &res, \\$/;"	f	class:FeatureExtractor
windowMul	src/Feature/FeatureExtractor.cpp	/^SP_RESULT FeatureExtractor::windowMul(std::vector<double> &window, \\$/;"	f	class:FeatureExtractor
windowing	src/Feature/FeatureExtractor.cpp	/^SP_RESULT FeatureExtractor::windowing(Matrix<double> & out_windows, \\$/;"	f	class:FeatureExtractor
word	build/Graph/parseGraph.h	/^    std::string word;$/;"	m	struct:GraphEdge
word	src/Feature/SeqModel.h	/^    const char * word;$/;"	m	struct:BackPtr
word	src/Feature/SeqModel.h	/^    const char * word;$/;"	m	struct:SeqState
word	src/Graph/parseGraph.h	/^    std::string word;$/;"	m	struct:GraphEdge
word	src/LexTree/LexTree.h	/^	char * word;$/;"	m	class:Node
wordAsynRecognition	src/Feature/WordDtwRecognition.cpp	/^SP_RESULT WordDtwRecognition::wordAsynRecognition(std::vector<Feature> &inputFeature) {$/;"	f	class:WordDtwRecognition
wordSp	src/EditDistance/app.cpp	/^const char * wordSp = ".,:;!?\\"\\t\\n\\r ";$/;"	v
wordSp	src/LexTree/app.cpp	/^const char * wordSp = ".,:!?\\"\\t\\n\\r ";$/;"	v
wordSynRecognition	src/Feature/WordDtwRecognition.cpp	/^SP_RESULT WordDtwRecognition::wordSynRecognition(std::vector<Feature> &inputFeature) {$/;"	f	class:WordDtwRecognition
wts	src/Feature/FeatureExtractor.h	/^        std::vector<double> * wts;$/;"	m	struct:FeatureExtractor::mul_task_info
~AEPAnalysis	src/Analysis/AEPAnalysis.h	/^    ~AEPAnalysis(){};$/;"	f	class:AEPAnalysis
~APP	src/EditDistance/app.cpp	/^APP::~APP(){}$/;"	f	class:APP
~APP	src/LexTree/app.cpp	/^APP::~APP(){}$/;"	f	class:APP
~AutoCapture	src/Capture/AutoCapture.h	/^    ~AutoCapture(){};$/;"	f	class:AutoCapture
~BEPAnalysis	src/Analysis/BEPAnalysis.h	/^    ~BEPAnalysis(){};$/;"	f	class:BEPAnalysis
~Capture	src/Capture/Capture.cpp	/^Capture::~Capture(){$/;"	f	class:Capture
~Container	src/EditDistance/tmp/container.h	/^	~Container(){}$/;"	f	class:Container
~DAEPAnalysis	src/Analysis/DAEPAnalysis.h	/^    ~DAEPAnalysis(){};$/;"	f	class:DAEPAnalysis
~DummyState	src/Feature/DummyState.h	/^        ~DummyState() {}$/;"	f	class:DummyState
~EPAnalysis	src/Analysis/EPAnalysis.h	/^    ~EPAnalysis(){};$/;"	f	class:EPAnalysis
~FeatureExtractor	src/Feature/FeatureExtractor.h	/^    ~FeatureExtractor() {}$/;"	f	class:FeatureExtractor
~Gaussian	src/Feature/Gaussian.cpp	/^Gaussian::~Gaussian(){$/;"	f	class:Gaussian
~HMMAutomaton	src/Feature/HMMAutomaton.h	/^    virtual ~HMMAutomaton() {};$/;"	f	class:HMMAutomaton
~HMMAutomatonSet	src/Feature/HMMAutomatonSet.cpp	/^HMMAutomatonSet::~HMMAutomatonSet() {$/;"	f	class:HMMAutomatonSet
~HMMKMeanAutomaton	src/Feature/HMMKmeanAutomaton.cpp	/^HMMKMeanAutomaton::~HMMKMeanAutomaton() {$/;"	f	class:HMMKMeanAutomaton
~HMMRecognition	src/Feature/HMMRecognition.cpp	/^HMMRecognition::~HMMRecognition() {$/;"	f	class:HMMRecognition
~HMMSeqKMeanTrainer	src/Feature/HMMSeqKMeanTrainer.cpp	/^HMMSeqKMeanTrainer::~HMMSeqKMeanTrainer() {$/;"	f	class:HMMSeqKMeanTrainer
~HMMSeqRecognition	src/Feature/HMMSeqRecognition.cpp	/^HMMSeqRecognition::~HMMSeqRecognition() {$/;"	f	class:HMMSeqRecognition
~HMMSeqTrainer	src/Feature/HMMSeqTrainer.cpp	/^HMMSeqTrainer::~HMMSeqTrainer() {$/;"	f	class:HMMSeqTrainer
~HMMSoftAutomaton	src/Feature/HMMSoftAutomaton.cpp	/^HMMSoftAutomaton::~HMMSoftAutomaton() {$/;"	f	class:HMMSoftAutomaton
~HMMState	src/Feature/HMMState.h	/^        virtual ~HMMState() {};$/;"	f	class:HMMState
~KMeanState	src/Feature/KMeanState.cpp	/^KMeanState::~KMeanState() $/;"	f	class:KMeanState
~LexTree	src/LexTree/LexTree.cpp	/^LexTree::~LexTree(){$/;"	f	class:LexTree
~Link	src/LexTree/spellcheck.h	/^	~Link(){$/;"	f	class:Link
~NoEmitState	src/Feature/NoEmitState.h	/^        ~NoEmitState() {}$/;"	f	class:NoEmitState
~Node	src/LexTree/LexTree.h	/^	~Node(){$/;"	f	class:Node
~ParseGraph	build/Graph/parseGraph.h	/^        ~ParseGraph() {}$/;"	f	class:ParseGraph
~ParseGraph	src/Graph/parseGraph.h	/^        ~ParseGraph() {}$/;"	f	class:ParseGraph
~Path	src/EditDistance/path.h	/^    ~Path(){$/;"	f	struct:Path
~RawData	src/data/RawData.cpp	/^RawData::~RawData(){$/;"	f	class:RawData
~SeqModel	src/Feature/SeqModel.cpp	/^SeqModel::~SeqModel() {$/;"	f	class:SeqModel
~SerialFiles	src/Configure/SerialFiles.cpp	/^SerialFiles::~SerialFiles() {$/;"	f	class:SerialFiles
~SoftState	src/Feature/SoftState.cpp	/^SoftState::~SoftState() {$/;"	f	class:SoftState
~SpellChecker	src/LexTree/spellcheck.cpp	/^SpellChecker::~SpellChecker(){$/;"	f	class:SpellChecker
~ThreadPool	src/ThreadPool/ThreadPool.cpp	/^ThreadPool::~ThreadPool() {$/;"	f	class:ThreadPool
~WaveFeatureOP	src/Feature/WaveFeatureOP.h	/^    ~WaveFeatureOP() {}$/;"	f	class:WaveFeatureOP
~WaveFeatureOPSet	src/Feature/WaveFeatureOPSet.cpp	/^WaveFeatureOPSet::~WaveFeatureOPSet() {}$/;"	f	class:WaveFeatureOPSet
~WordDtwRecognition	src/Feature/WordDtwRecognition.cpp	/^WordDtwRecognition::~WordDtwRecognition() {}$/;"	f	class:WordDtwRecognition
